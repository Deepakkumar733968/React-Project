{"ast":null,"code":"/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { useSyncExternalStore } from \"use-sync-external-store/shim\";\nimport { Classes } from \"../../common\";\nvar globalStack = [];\nvar globalStackListeners = [];\n/**\n * Modify the global stack in-place and notify all listeners of the updated value.\n *\n * @public for testing\n */\nexport var modifyGlobalStack = function (fn) {\n  fn(globalStack);\n  globalStackListeners.forEach(function (listener) {\n    return listener();\n  });\n};\nvar legacyGlobalOverlayStackStore = {\n  getSnapshot: function () {\n    return globalStack;\n  },\n  subscribe: function (listener) {\n    globalStackListeners.push(listener);\n    return function () {\n      var index = globalStackListeners.indexOf(listener);\n      globalStackListeners.splice(index, 1);\n    };\n  }\n};\n/**\n * Legacy implementation of a global overlay stack which maintains state in a global variable.\n * This is used for backwards-compatibility with overlay-based components in Blueprint v5.\n * It will be removed in Blueprint v6 once `<OverlaysProvider>` is required.\n *\n * @see https://github.com/palantir/blueprint/wiki/Overlay2-migration\n */\nexport function useLegacyOverlayStack() {\n  var stack = useSyncExternalStore(legacyGlobalOverlayStackStore.subscribe, legacyGlobalOverlayStackStore.getSnapshot,\n  // server snapshot is the same as client snapshot\n  legacyGlobalOverlayStackStore.getSnapshot);\n  var getLastOpened = React.useCallback(function () {\n    return stack[stack.length - 1];\n  }, [stack]);\n  var getThisOverlayAndDescendants = React.useCallback(function (id) {\n    var stackIndex = stack.findIndex(function (o) {\n      return o.id === id;\n    });\n    return stack.slice(stackIndex);\n  }, [stack]);\n  var resetStack = React.useCallback(function () {\n    modifyGlobalStack(function (s) {\n      return s.splice(0, s.length);\n    });\n  }, []);\n  var openOverlay = React.useCallback(function (overlay) {\n    globalStack.push(overlay);\n    if (overlay.props.usePortal && overlay.props.hasBackdrop) {\n      // add a class to the body to prevent scrolling of content below the overlay\n      document.body.classList.add(Classes.OVERLAY_OPEN);\n    }\n  }, []);\n  var closeOverlay = React.useCallback(function (id) {\n    var otherOverlaysWithBackdrop = stack.filter(function (o) {\n      return o.props.usePortal && o.props.hasBackdrop && o.id !== id;\n    });\n    var index = globalStack.findIndex(function (o) {\n      return o.id === id;\n    });\n    if (index > -1) {\n      globalStack.splice(index, 1);\n    }\n    if (otherOverlaysWithBackdrop.length === 0) {\n      // remove body class which prevents scrolling of content below overlay\n      document.body.classList.remove(Classes.OVERLAY_OPEN);\n    }\n  }, [stack]);\n  return {\n    closeOverlay: closeOverlay,\n    getLastOpened: getLastOpened,\n    getThisOverlayAndDescendants: getThisOverlayAndDescendants,\n    openOverlay: openOverlay,\n    resetStack: resetStack\n  };\n}","map":{"version":3,"names":["React","useSyncExternalStore","Classes","globalStack","globalStackListeners","modifyGlobalStack","fn","forEach","listener","legacyGlobalOverlayStackStore","getSnapshot","subscribe","push","index","indexOf","splice","useLegacyOverlayStack","stack","getLastOpened","useCallback","length","getThisOverlayAndDescendants","id","stackIndex","findIndex","o","slice","resetStack","s","openOverlay","overlay","props","usePortal","hasBackdrop","document","body","classList","add","OVERLAY_OPEN","closeOverlay","otherOverlaysWithBackdrop","filter","remove"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\hooks\\overlays\\useLegacyOverlayStack.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { useSyncExternalStore } from \"use-sync-external-store/shim\";\n\nimport { Classes } from \"../../common\";\nimport type { OverlayInstance } from \"../../components\";\n\nimport type { UseOverlayStackReturnValue } from \"./useOverlayStack\";\n\nconst globalStack: OverlayInstance[] = [];\nconst globalStackListeners: Array<() => void> = [];\n\n/**\n * Modify the global stack in-place and notify all listeners of the updated value.\n *\n * @public for testing\n */\nexport const modifyGlobalStack = (fn: (stack: OverlayInstance[]) => void) => {\n    fn(globalStack);\n    globalStackListeners.forEach(listener => listener());\n};\n\nconst legacyGlobalOverlayStackStore = {\n    getSnapshot: () => globalStack,\n    subscribe: (listener: () => void) => {\n        globalStackListeners.push(listener);\n        return () => {\n            const index = globalStackListeners.indexOf(listener);\n            globalStackListeners.splice(index, 1);\n        };\n    },\n};\n\n/**\n * Legacy implementation of a global overlay stack which maintains state in a global variable.\n * This is used for backwards-compatibility with overlay-based components in Blueprint v5.\n * It will be removed in Blueprint v6 once `<OverlaysProvider>` is required.\n *\n * @see https://github.com/palantir/blueprint/wiki/Overlay2-migration\n */\nexport function useLegacyOverlayStack(): UseOverlayStackReturnValue {\n    const stack = useSyncExternalStore(\n        legacyGlobalOverlayStackStore.subscribe,\n        legacyGlobalOverlayStackStore.getSnapshot,\n        // server snapshot is the same as client snapshot\n        legacyGlobalOverlayStackStore.getSnapshot,\n    );\n\n    const getLastOpened = React.useCallback(() => stack[stack.length - 1], [stack]);\n\n    const getThisOverlayAndDescendants = React.useCallback(\n        (id: string) => {\n            const stackIndex = stack.findIndex(o => o.id === id);\n            return stack.slice(stackIndex);\n        },\n        [stack],\n    );\n\n    const resetStack = React.useCallback(() => {\n        modifyGlobalStack(s => s.splice(0, s.length));\n    }, []);\n\n    const openOverlay = React.useCallback((overlay: OverlayInstance) => {\n        globalStack.push(overlay);\n        if (overlay.props.usePortal && overlay.props.hasBackdrop) {\n            // add a class to the body to prevent scrolling of content below the overlay\n            document.body.classList.add(Classes.OVERLAY_OPEN);\n        }\n    }, []);\n\n    const closeOverlay = React.useCallback(\n        (id: string) => {\n            const otherOverlaysWithBackdrop = stack.filter(\n                o => o.props.usePortal && o.props.hasBackdrop && o.id !== id,\n            );\n\n            const index = globalStack.findIndex(o => o.id === id);\n            if (index > -1) {\n                globalStack.splice(index, 1);\n            }\n\n            if (otherOverlaysWithBackdrop.length === 0) {\n                // remove body class which prevents scrolling of content below overlay\n                document.body.classList.remove(Classes.OVERLAY_OPEN);\n            }\n        },\n        [stack],\n    );\n\n    return {\n        closeOverlay,\n        getLastOpened,\n        getThisOverlayAndDescendants,\n        openOverlay,\n        resetStack,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}