{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign } from \"tslib\";\nimport * as React from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Button } from \"../button/buttons\";\nimport { Text } from \"../text/text\";\nexport var PanelView2 = function (_a) {\n  var panel = _a.panel,\n    onClose = _a.onClose,\n    onOpen = _a.onOpen,\n    previousPanel = _a.previousPanel,\n    showHeader = _a.showHeader;\n  var hasPreviousPanel = previousPanel !== undefined;\n  var handleClose = React.useCallback(function () {\n    // only remove this panel if it is not the only one.\n    if (hasPreviousPanel) {\n      onClose(panel);\n    }\n  }, [onClose, panel, hasPreviousPanel]);\n  var maybeBackButton = previousPanel === undefined ? null : React.createElement(Button, {\n    \"aria-label\": \"Back\",\n    className: Classes.PANEL_STACK2_HEADER_BACK,\n    icon: \"chevron-left\",\n    onClick: handleClose,\n    size: \"small\",\n    text: previousPanel.title,\n    title: previousPanel.htmlTitle,\n    variant: \"minimal\"\n  });\n  // `panel.renderPanel` is simply a function that returns a React.JSX.Element. It may be an FC which\n  // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate\n  // those hooks with their own lifecycle through a very simple wrapper component.\n  var PanelWrapper = React.useMemo(function () {\n    return function () {\n      // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be\n      // instantiated with a type unrelated to our generic constraint `T` here. We know\n      // we're sending the right values here though, and it makes the consumer API for this\n      // component type safe, so it's ok to do this...\n      return panel.renderPanel(__assign({\n        closePanel: handleClose,\n        openPanel: onOpen\n      }, panel.props));\n    };\n  }, [panel, handleClose, onOpen]);\n  return React.createElement(\"div\", {\n    className: Classes.PANEL_STACK2_VIEW\n  }, showHeader && React.createElement(\"div\", {\n    className: Classes.PANEL_STACK2_HEADER\n  }, React.createElement(\"span\", null, maybeBackButton), React.createElement(Text, {\n    className: Classes.HEADING,\n    ellipsize: true,\n    title: panel.htmlTitle\n  }, panel.title), React.createElement(\"span\", null)), React.createElement(PanelWrapper, null));\n};\nPanelView2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".PanelView2\");","map":{"version":3,"names":["React","Classes","DISPLAYNAME_PREFIX","Button","Text","PanelView2","_a","panel","onClose","onOpen","previousPanel","showHeader","hasPreviousPanel","undefined","handleClose","useCallback","maybeBackButton","createElement","className","PANEL_STACK2_HEADER_BACK","icon","onClick","size","text","title","htmlTitle","variant","PanelWrapper","useMemo","renderPanel","__assign","closePanel","openPanel","props","PANEL_STACK2_VIEW","PANEL_STACK2_HEADER","HEADING","ellipsize","displayName","concat"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\panel-stack2\\panelView2.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Button } from \"../button/buttons\";\nimport { Text } from \"../text/text\";\n\nimport type { Panel, PanelProps } from \"./panelTypes\";\n\nexport interface PanelView2Props<T extends Panel<object>> {\n    /**\n     * Callback invoked when the user presses the back button or a panel invokes\n     * the `closePanel()` injected prop method.\n     */\n    onClose: (removedPanel: T) => void;\n\n    /**\n     * Callback invoked when a panel invokes the `openPanel(panel)` injected\n     * prop method.\n     */\n    onOpen: (addedPanel: T) => void;\n\n    /** The panel to be displayed. */\n    panel: T;\n\n    /** The previous panel in the stack, for rendering the \"back\" button. */\n    previousPanel?: T;\n\n    /** Whether to show the header with the \"back\" button. */\n    showHeader: boolean;\n}\n\ninterface PanelView2Component {\n    <T extends Panel<object>>(props: PanelView2Props<T>): React.JSX.Element | null;\n    displayName: string;\n}\n\nexport const PanelView2: PanelView2Component = <T extends Panel<object>>({\n    panel,\n    onClose,\n    onOpen,\n    previousPanel,\n    showHeader,\n}: PanelView2Props<T>) => {\n    const hasPreviousPanel = previousPanel !== undefined;\n    const handleClose = React.useCallback(() => {\n        // only remove this panel if it is not the only one.\n        if (hasPreviousPanel) {\n            onClose(panel);\n        }\n    }, [onClose, panel, hasPreviousPanel]);\n\n    const maybeBackButton =\n        previousPanel === undefined ? null : (\n            <Button\n                aria-label=\"Back\"\n                className={Classes.PANEL_STACK2_HEADER_BACK}\n                icon=\"chevron-left\"\n                onClick={handleClose}\n                size=\"small\"\n                text={previousPanel.title}\n                title={previousPanel.htmlTitle}\n                variant=\"minimal\"\n            />\n        );\n\n    // `panel.renderPanel` is simply a function that returns a React.JSX.Element. It may be an FC which\n    // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate\n    // those hooks with their own lifecycle through a very simple wrapper component.\n    const PanelWrapper: React.FC = React.useMemo(\n        () => () =>\n            // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be\n            // instantiated with a type unrelated to our generic constraint `T` here. We know\n            // we're sending the right values here though, and it makes the consumer API for this\n            // component type safe, so it's ok to do this...\n            panel.renderPanel({\n                closePanel: handleClose,\n                openPanel: onOpen,\n                ...panel.props,\n            } as PanelProps<T>),\n        [panel, handleClose, onOpen],\n    );\n\n    return (\n        <div className={Classes.PANEL_STACK2_VIEW}>\n            {showHeader && (\n                <div className={Classes.PANEL_STACK2_HEADER}>\n                    {/* two <span> tags here ensure title is centered as long as possible, with `flex: 1` styling */}\n                    <span>{maybeBackButton}</span>\n                    <Text className={Classes.HEADING} ellipsize={true} title={panel.htmlTitle}>\n                        {panel.title}\n                    </Text>\n                    <span />\n                </div>\n            )}\n            <PanelWrapper />\n        </div>\n    );\n};\nPanelView2.displayName = `${DISPLAYNAME_PREFIX}.PanelView2`;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,OAAO,EAAEC,kBAAkB,QAAQ,cAAc;AAC1D,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,IAAI,QAAQ,cAAc;AAgCnC,OAAO,IAAMC,UAAU,GAAwB,SAAAA,CAA0BC,EAMpD;MALjBC,KAAK,GAAAD,EAAA,CAAAC,KAAA;IACLC,OAAO,GAAAF,EAAA,CAAAE,OAAA;IACPC,MAAM,GAAAH,EAAA,CAAAG,MAAA;IACNC,aAAa,GAAAJ,EAAA,CAAAI,aAAA;IACbC,UAAU,GAAAL,EAAA,CAAAK,UAAA;EAEV,IAAMC,gBAAgB,GAAGF,aAAa,KAAKG,SAAS;EACpD,IAAMC,WAAW,GAAGd,KAAK,CAACe,WAAW,CAAC;IAClC;IACA,IAAIH,gBAAgB,EAAE;MAClBJ,OAAO,CAACD,KAAK,CAAC;IAClB;EACJ,CAAC,EAAE,CAACC,OAAO,EAAED,KAAK,EAAEK,gBAAgB,CAAC,CAAC;EAEtC,IAAMI,eAAe,GACjBN,aAAa,KAAKG,SAAS,GAAG,IAAI,GAC9Bb,KAAA,CAAAiB,aAAA,CAACd,MAAM;IAAA,cACQ,MAAM;IACjBe,SAAS,EAAEjB,OAAO,CAACkB,wBAAwB;IAC3CC,IAAI,EAAC,cAAc;IACnBC,OAAO,EAAEP,WAAW;IACpBQ,IAAI,EAAC,OAAO;IACZC,IAAI,EAAEb,aAAa,CAACc,KAAK;IACzBA,KAAK,EAAEd,aAAa,CAACe,SAAS;IAC9BC,OAAO,EAAC;EAAS,EAExB;EAEL;EACA;EACA;EACA,IAAMC,YAAY,GAAa3B,KAAK,CAAC4B,OAAO,CACxC;IAAM;MACF;MACA;MACA;MACA;MACA,OAAArB,KAAK,CAACsB,WAAW,CAACC,QAAA;QACdC,UAAU,EAAEjB,WAAW;QACvBkB,SAAS,EAAEvB;MAAM,GACdF,KAAK,CAAC0B,KAAK,CACA,CAAC;IAJnB,CAImB;EATjB,CASiB,EACvB,CAAC1B,KAAK,EAAEO,WAAW,EAAEL,MAAM,CAAC,CAC/B;EAED,OACIT,KAAA,CAAAiB,aAAA;IAAKC,SAAS,EAAEjB,OAAO,CAACiC;EAAiB,GACpCvB,UAAU,IACPX,KAAA,CAAAiB,aAAA;IAAKC,SAAS,EAAEjB,OAAO,CAACkC;EAAmB,GAEvCnC,KAAA,CAAAiB,aAAA,eAAOD,eAAe,CAAQ,EAC9BhB,KAAA,CAAAiB,aAAA,CAACb,IAAI;IAACc,SAAS,EAAEjB,OAAO,CAACmC,OAAO;IAAEC,SAAS,EAAE,IAAI;IAAEb,KAAK,EAAEjB,KAAK,CAACkB;EAAS,GACpElB,KAAK,CAACiB,KAAK,CACT,EACPxB,KAAA,CAAAiB,aAAA,cAAQ,CAEf,EACDjB,KAAA,CAAAiB,aAAA,CAACU,YAAY,OAAG,CACd;AAEd,CAAC;AACDtB,UAAU,CAACiC,WAAW,GAAG,GAAAC,MAAA,CAAGrC,kBAAkB,gBAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}