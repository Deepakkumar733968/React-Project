{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __spreadArray } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { usePrevious } from \"../../hooks\";\nimport { PanelView2 } from \"./panelView2\";\n/**\n * Panel stack (v2) component.\n *\n * @see https://blueprintjs.com/docs/#core/components/panel-stack2\n * @template T type union of all possible panels in this stack\n */\nexport var PanelStack2 = function (props) {\n  var _a;\n  var initialPanel = props.initialPanel,\n    onClose = props.onClose,\n    onOpen = props.onOpen,\n    _b = props.renderActivePanelOnly,\n    renderActivePanelOnly = _b === void 0 ? true : _b,\n    _c = props.showPanelHeader,\n    showPanelHeader = _c === void 0 ? true : _c,\n    propsStack = props.stack;\n  var isControlled = propsStack != null;\n  var _d = React.useState(initialPanel !== undefined ? [initialPanel] : []),\n    localStack = _d[0],\n    setLocalStack = _d[1];\n  var stack = React.useMemo(function () {\n    return isControlled ? propsStack.slice().reverse() : localStack;\n  }, [localStack, isControlled, propsStack]);\n  var prevStackLength = (_a = usePrevious(stack.length)) !== null && _a !== void 0 ? _a : stack.length;\n  var direction = stack.length - prevStackLength < 0 ? \"pop\" : \"push\";\n  var handlePanelOpen = React.useCallback(function (panel) {\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen(panel);\n    if (!isControlled) {\n      setLocalStack(function (prevStack) {\n        return __spreadArray([panel], prevStack, true);\n      });\n    }\n  }, [onOpen, isControlled]);\n  var handlePanelClose = React.useCallback(function (panel) {\n    onClose === null || onClose === void 0 ? void 0 : onClose(panel);\n    if (!isControlled) {\n      setLocalStack(function (prevStack) {\n        return prevStack.slice(1);\n      });\n    }\n  }, [onClose, isControlled]);\n  // early return, after all hooks are called\n  if (stack.length === 0) {\n    return null;\n  }\n  var panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n  var panels = panelsToRender.map(function (panel, index) {\n    // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n    // therefore they would not trigger the \"enter\" transition event as they were entered.\n    // To force the enter event, we want to change the key, but stack.length is not enough\n    // and a single panel should not rerender as long as it's hidden.\n    // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n    // second one, active changes only when the panel becomes or stops being active.\n    var layer = stack.length - index;\n    var key = renderActivePanelOnly ? stack.length : layer;\n    return React.createElement(CSSTransition, {\n      classNames: Classes.PANEL_STACK2,\n      key: key,\n      timeout: 400\n    }, React.createElement(PanelView2, {\n      onClose: handlePanelClose,\n      onOpen: handlePanelOpen,\n      panel: panel,\n      previousPanel: stack[index + 1],\n      showHeader: showPanelHeader\n    }));\n  }).reverse();\n  var classes = classNames(Classes.PANEL_STACK2, \"\".concat(Classes.PANEL_STACK2, \"-\").concat(direction), props.className);\n  return React.createElement(TransitionGroup, {\n    className: classes,\n    component: \"div\"\n  }, panels);\n};\nPanelStack2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".PanelStack2\");","map":{"version":3,"names":["classNames","React","CSSTransition","TransitionGroup","Classes","DISPLAYNAME_PREFIX","usePrevious","PanelView2","PanelStack2","props","initialPanel","onClose","onOpen","_b","renderActivePanelOnly","_c","showPanelHeader","propsStack","stack","isControlled","_d","useState","undefined","localStack","setLocalStack","useMemo","slice","reverse","prevStackLength","_a","length","direction","handlePanelOpen","useCallback","panel","prevStack","__spreadArray","handlePanelClose","panelsToRender","panels","map","index","layer","key","createElement","PANEL_STACK2","timeout","previousPanel","showHeader","classes","concat","className","component","displayName"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\panel-stack2\\panelStack2.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { Classes, DISPLAYNAME_PREFIX, type Props } from \"../../common\";\nimport { usePrevious } from \"../../hooks\";\n\nimport type { Panel } from \"./panelTypes\";\nimport { PanelView2 } from \"./panelView2\";\n\n/**\n * @template T type union of all possible panels in this stack\n */\nexport interface PanelStack2Props<T extends Panel<object>> extends Props {\n    /**\n     * The initial panel to show on mount. This panel cannot be removed from the\n     * stack and will appear when the stack is empty.\n     * This prop is only used in uncontrolled mode and is thus mutually\n     * exclusive with the `stack` prop.\n     */\n    initialPanel?: T;\n\n    /**\n     * Callback invoked when the user presses the back button or a panel\n     * closes itself with a `closePanel()` action.\n     */\n    onClose?: (removedPanel: T) => void;\n\n    /**\n     * Callback invoked when a panel opens a new panel with an `openPanel(panel)`\n     * action.\n     */\n    onOpen?: (addedPanel: T) => void;\n\n    /**\n     * If false, PanelStack will render all panels in the stack to the DOM, allowing their\n     * React component trees to maintain state as a user navigates through the stack.\n     * Panels other than the currently active one will be invisible.\n     *\n     * @default true\n     */\n    renderActivePanelOnly?: boolean;\n\n    /**\n     * Whether to show the header with the \"back\" button in each panel.\n     *\n     * @default true\n     */\n    showPanelHeader?: boolean;\n\n    /**\n     * The full stack of panels in controlled mode. The last panel in the stack\n     * will be displayed.\n     */\n    stack?: readonly T[];\n}\n\ninterface PanelStack2Component {\n    /**\n     * @template T type union of all possible panels in this stack\n     */\n    <T extends Panel<object>>(props: PanelStack2Props<T>): React.JSX.Element | null;\n    displayName: string;\n}\n\n/**\n * Panel stack (v2) component.\n *\n * @see https://blueprintjs.com/docs/#core/components/panel-stack2\n * @template T type union of all possible panels in this stack\n */\nexport const PanelStack2: PanelStack2Component = <T extends Panel<object>>(props: PanelStack2Props<T>) => {\n    const {\n        initialPanel,\n        onClose,\n        onOpen,\n        renderActivePanelOnly = true,\n        showPanelHeader = true,\n        stack: propsStack,\n    } = props;\n    const isControlled = propsStack != null;\n\n    const [localStack, setLocalStack] = React.useState<T[]>(initialPanel !== undefined ? [initialPanel] : []);\n    const stack = React.useMemo(\n        () => (isControlled ? propsStack.slice().reverse() : localStack),\n        [localStack, isControlled, propsStack],\n    );\n    const prevStackLength = usePrevious(stack.length) ?? stack.length;\n    const direction = stack.length - prevStackLength < 0 ? \"pop\" : \"push\";\n\n    const handlePanelOpen = React.useCallback(\n        (panel: T) => {\n            onOpen?.(panel);\n            if (!isControlled) {\n                setLocalStack(prevStack => [panel, ...prevStack]);\n            }\n        },\n        [onOpen, isControlled],\n    );\n    const handlePanelClose = React.useCallback(\n        (panel: T) => {\n            onClose?.(panel);\n            if (!isControlled) {\n                setLocalStack(prevStack => prevStack.slice(1));\n            }\n        },\n        [onClose, isControlled],\n    );\n\n    // early return, after all hooks are called\n    if (stack.length === 0) {\n        return null;\n    }\n\n    const panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    const panels = panelsToRender\n        .map((panel: T, index: number) => {\n            // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n            // therefore they would not trigger the \"enter\" transition event as they were entered.\n            // To force the enter event, we want to change the key, but stack.length is not enough\n            // and a single panel should not rerender as long as it's hidden.\n            // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n            // second one, active changes only when the panel becomes or stops being active.\n            const layer = stack.length - index;\n            const key = renderActivePanelOnly ? stack.length : layer;\n\n            return (\n                <CSSTransition classNames={Classes.PANEL_STACK2} key={key} timeout={400}>\n                    <PanelView2<T>\n                        onClose={handlePanelClose}\n                        onOpen={handlePanelOpen}\n                        panel={panel}\n                        previousPanel={stack[index + 1]}\n                        showHeader={showPanelHeader}\n                    />\n                </CSSTransition>\n            );\n        })\n        .reverse();\n\n    const classes = classNames(Classes.PANEL_STACK2, `${Classes.PANEL_STACK2}-${direction}`, props.className);\n\n    return (\n        <TransitionGroup className={classes} component=\"div\">\n            {panels}\n        </TransitionGroup>\n    );\n};\nPanelStack2.displayName = `${DISPLAYNAME_PREFIX}.PanelStack2`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}