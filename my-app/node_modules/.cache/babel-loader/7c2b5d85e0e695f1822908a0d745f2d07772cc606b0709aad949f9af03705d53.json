{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\n/**\n * @fileoverview This component is DEPRECATED, and the code is frozen.\n * All changes & bugfixes should be made to Overlay2 instead.\n */\n/* eslint-disable @typescript-eslint/no-deprecated */\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { getActiveElement, isFunction } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\";\nimport { getKeyboardFocusableElements } from \"./overlayUtils\";\n/**\n * Overlay component.\n *\n * @deprecated use `Overlay2` instead\n * @see https://blueprintjs.com/docs/#core/components/overlay\n */\nvar Overlay = /** @class */function (_super) {\n  __extends(Overlay, _super);\n  function Overlay() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.isAutoFocusing = false;\n    _this.state = {\n      hasEverOpened: _this.props.isOpen\n    };\n    /** Ref for container element, containing all children and the backdrop */\n    _this.containerElement = React.createRef();\n    // An empty, keyboard-focusable div at the beginning of the Overlay content\n    _this.startFocusTrapElement = React.createRef();\n    // An empty, keyboard-focusable div at the end of the Overlay content\n    _this.endFocusTrapElement = React.createRef();\n    _this.maybeRenderChild = function (child) {\n      if (isFunction(child)) {\n        child = child();\n      }\n      if (child == null) {\n        return null;\n      }\n      // decorate the child with a few injected props\n      var tabIndex = _this.props.enforceFocus || _this.props.autoFocus ? 0 : undefined;\n      var decoratedChild = typeof child === \"object\" ? React.cloneElement(child, {\n        className: classNames(child.props.className, Classes.OVERLAY_CONTENT),\n        tabIndex: tabIndex\n      }) : React.createElement(\"span\", {\n        className: Classes.OVERLAY_CONTENT,\n        tabIndex: tabIndex\n      }, child);\n      var _a = _this.props,\n        onOpening = _a.onOpening,\n        onOpened = _a.onOpened,\n        onClosing = _a.onClosing,\n        transitionDuration = _a.transitionDuration,\n        transitionName = _a.transitionName;\n      return React.createElement(CSSTransition, {\n        classNames: transitionName,\n        onEntering: onOpening,\n        onEntered: onOpened,\n        onExiting: onClosing,\n        onExited: _this.handleTransitionExited,\n        timeout: transitionDuration,\n        addEndListener: _this.handleTransitionAddEnd\n      }, decoratedChild);\n    };\n    /**\n     * Ensures repeatedly pressing shift+tab keeps focus inside the Overlay. Moves focus to\n     * the `endFocusTrapElement` or the first keyboard-focusable element in the Overlay (excluding\n     * the `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    _this.handleStartFocusTrapElementFocus = function (e) {\n      var _a, _b;\n      if (!_this.props.enforceFocus || _this.isAutoFocusing) {\n        return;\n      }\n      // e.relatedTarget will not be defined if this was a programmatic focus event, as is the\n      // case when we call this.bringFocusInsideOverlay() after a user clicked on the backdrop.\n      // Otherwise, we're handling a user interaction, and we should wrap around to the last\n      // element in this transition group.\n      if (e.relatedTarget != null && ((_a = _this.containerElement.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) && e.relatedTarget !== _this.endFocusTrapElement.current) {\n        (_b = _this.endFocusTrapElement.current) === null || _b === void 0 ? void 0 : _b.focus({\n          preventScroll: true\n        });\n      }\n    };\n    /**\n     * Wrap around to the end of the dialog if `enforceFocus` is enabled.\n     */\n    _this.handleStartFocusTrapElementKeyDown = function (e) {\n      var _a;\n      if (!_this.props.enforceFocus) {\n        return;\n      }\n      if (e.shiftKey && e.key === \"Tab\") {\n        var lastFocusableElement = getKeyboardFocusableElements(_this.containerElement).pop();\n        if (lastFocusableElement != null) {\n          lastFocusableElement.focus();\n        } else {\n          (_a = _this.endFocusTrapElement.current) === null || _a === void 0 ? void 0 : _a.focus({\n            preventScroll: true\n          });\n        }\n      }\n    };\n    /**\n     * Ensures repeatedly pressing tab keeps focus inside the Overlay. Moves focus to the\n     * `startFocusTrapElement` or the last keyboard-focusable element in the Overlay (excluding the\n     * `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    _this.handleEndFocusTrapElementFocus = function (e) {\n      var _a, _b, _c;\n      // No need for this.props.enforceFocus check here because this element is only rendered\n      // when that prop is true.\n      // During user interactions, e.relatedTarget will be defined, and we should wrap around to the\n      // \"start focus trap\" element.\n      // Otherwise, we're handling a programmatic focus event, which can only happen after a user\n      // presses shift+tab from the first focusable element in the overlay.\n      if (e.relatedTarget != null && ((_a = _this.containerElement.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) && e.relatedTarget !== _this.startFocusTrapElement.current) {\n        var firstFocusableElement = getKeyboardFocusableElements(_this.containerElement).shift();\n        // ensure we don't re-focus an already active element by comparing against e.relatedTarget\n        if (!_this.isAutoFocusing && firstFocusableElement != null && firstFocusableElement !== e.relatedTarget) {\n          firstFocusableElement.focus();\n        } else {\n          (_b = _this.startFocusTrapElement.current) === null || _b === void 0 ? void 0 : _b.focus({\n            preventScroll: true\n          });\n        }\n      } else {\n        var lastFocusableElement = getKeyboardFocusableElements(_this.containerElement).pop();\n        if (lastFocusableElement != null) {\n          lastFocusableElement.focus();\n        } else {\n          // Keeps focus within Overlay even if there are no keyboard-focusable children\n          (_c = _this.startFocusTrapElement.current) === null || _c === void 0 ? void 0 : _c.focus({\n            preventScroll: true\n          });\n        }\n      }\n    };\n    _this.handleTransitionExited = function (node) {\n      var _a, _b;\n      if (_this.props.shouldReturnFocusOnClose && _this.lastActiveElementBeforeOpened instanceof HTMLElement) {\n        _this.lastActiveElementBeforeOpened.focus();\n      }\n      (_b = (_a = _this.props).onClosed) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    };\n    _this.handleBackdropMouseDown = function (e) {\n      var _a;\n      var _b = _this.props,\n        backdropProps = _b.backdropProps,\n        canOutsideClickClose = _b.canOutsideClickClose,\n        enforceFocus = _b.enforceFocus,\n        onClose = _b.onClose;\n      if (canOutsideClickClose) {\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n      }\n      if (enforceFocus) {\n        _this.bringFocusInsideOverlay();\n      }\n      (_a = backdropProps === null || backdropProps === void 0 ? void 0 : backdropProps.onMouseDown) === null || _a === void 0 ? void 0 : _a.call(backdropProps, e);\n    };\n    _this.handleDocumentClick = function (e) {\n      var _a = _this.props,\n        canOutsideClickClose = _a.canOutsideClickClose,\n        isOpen = _a.isOpen,\n        onClose = _a.onClose;\n      // get the actual target even in the Shadow DOM\n      // see https://github.com/palantir/blueprint/issues/4220\n      var eventTarget = e.composed ? e.composedPath()[0] : e.target;\n      var stackIndex = Overlay.openStack.indexOf(_this);\n      var isClickInThisOverlayOrDescendant = Overlay.openStack.slice(stackIndex).some(function (_a) {\n        var _b;\n        var elem = _a.containerElement;\n        // `elem` is the container of backdrop & content, so clicking directly on that container\n        // should not count as being \"inside\" the overlay.\n        return ((_b = elem.current) === null || _b === void 0 ? void 0 : _b.contains(eventTarget)) && !elem.current.isSameNode(eventTarget);\n      });\n      if (isOpen && !isClickInThisOverlayOrDescendant && canOutsideClickClose) {\n        // casting to any because this is a native event\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n      }\n    };\n    /**\n     * When multiple Overlays are open, this event handler is only active for the most recently\n     * opened one to avoid Overlays competing with each other for focus.\n     */\n    _this.handleDocumentFocus = function (e) {\n      // get the actual target even in the Shadow DOM\n      // see https://github.com/palantir/blueprint/issues/4220\n      var eventTarget = e.composed ? e.composedPath()[0] : e.target;\n      if (_this.props.enforceFocus && _this.containerElement.current != null && eventTarget instanceof Node && !_this.containerElement.current.contains(eventTarget)) {\n        // prevent default focus behavior (sometimes auto-scrolls the page)\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        _this.bringFocusInsideOverlay();\n      }\n    };\n    _this.handleKeyDown = function (e) {\n      var _a = _this.props,\n        canEscapeKeyClose = _a.canEscapeKeyClose,\n        onClose = _a.onClose;\n      if (e.key === \"Escape\" && canEscapeKeyClose) {\n        onClose === null || onClose === void 0 ? void 0 : onClose(e);\n        // prevent other overlays from closing\n        e.stopPropagation();\n        // prevent browser-specific escape key behavior (Safari exits fullscreen)\n        e.preventDefault();\n      }\n    };\n    _this.handleTransitionAddEnd = function () {\n      // no-op\n    };\n    return _this;\n  }\n  Overlay.getDerivedStateFromProps = function (_a) {\n    var hasEverOpened = _a.isOpen;\n    if (hasEverOpened) {\n      return {\n        hasEverOpened: hasEverOpened\n      };\n    }\n    return null;\n  };\n  Overlay.prototype.render = function () {\n    var _a;\n    var _b;\n    // oh snap! no reason to render anything at all if we're being truly lazy\n    if (this.props.lazy && !this.state.hasEverOpened) {\n      return null;\n    }\n    var _c = this.props,\n      autoFocus = _c.autoFocus,\n      children = _c.children,\n      className = _c.className,\n      enforceFocus = _c.enforceFocus,\n      usePortal = _c.usePortal,\n      isOpen = _c.isOpen;\n    // TransitionGroup types require single array of children; does not support nested arrays.\n    // So we must collapse backdrop and children into one array, and every item must be wrapped in a\n    // Transition element (no ReactText allowed).\n    var childrenWithTransitions = isOpen ? (_b = React.Children.map(children, this.maybeRenderChild)) !== null && _b !== void 0 ? _b : [] : [];\n    var maybeBackdrop = this.maybeRenderBackdrop();\n    if (maybeBackdrop !== null) {\n      childrenWithTransitions.unshift(maybeBackdrop);\n    }\n    if (isOpen && (autoFocus || enforceFocus) && childrenWithTransitions.length > 0) {\n      childrenWithTransitions.unshift(this.renderDummyElement(\"__start\", {\n        className: Classes.OVERLAY_START_FOCUS_TRAP,\n        onFocus: this.handleStartFocusTrapElementFocus,\n        onKeyDown: this.handleStartFocusTrapElementKeyDown,\n        ref: this.startFocusTrapElement\n      }));\n      if (enforceFocus) {\n        childrenWithTransitions.push(this.renderDummyElement(\"__end\", {\n          className: Classes.OVERLAY_END_FOCUS_TRAP,\n          onFocus: this.handleEndFocusTrapElementFocus,\n          ref: this.endFocusTrapElement\n        }));\n      }\n    }\n    var containerClasses = classNames(Classes.OVERLAY, (_a = {}, _a[Classes.OVERLAY_OPEN] = isOpen, _a[Classes.OVERLAY_INLINE] = !usePortal, _a), className);\n    var transitionGroup = React.createElement(\"div\", {\n      \"aria-live\": \"polite\",\n      className: containerClasses,\n      onKeyDown: this.handleKeyDown,\n      ref: this.containerElement\n    }, React.createElement(TransitionGroup, {\n      appear: true,\n      component: null\n    }, childrenWithTransitions));\n    if (usePortal) {\n      return React.createElement(Portal, {\n        className: this.props.portalClassName,\n        container: this.props.portalContainer,\n        stopPropagationEvents: this.props.portalStopPropagationEvents\n      }, transitionGroup);\n    } else {\n      return transitionGroup;\n    }\n  };\n  Overlay.prototype.componentDidMount = function () {\n    if (this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n  Overlay.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.isOpen && !this.props.isOpen) {\n      this.overlayWillClose();\n    } else if (!prevProps.isOpen && this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n  Overlay.prototype.componentWillUnmount = function () {\n    this.overlayWillClose();\n  };\n  /**\n   * @public for testing\n   * @internal\n   */\n  Overlay.prototype.bringFocusInsideOverlay = function () {\n    var _this = this;\n    // always delay focus manipulation to just before repaint to prevent scroll jumping\n    return this.requestAnimationFrame(function () {\n      var _a;\n      // container element may be undefined between component mounting and Portal rendering\n      // activeElement may be undefined in some rare cases in IE\n      var activeElement = getActiveElement(_this.containerElement.current);\n      if (_this.containerElement.current == null || activeElement == null || !_this.props.isOpen) {\n        return;\n      }\n      var container = _this.containerElement.current;\n      var isFocusOutsideModal = !container.contains(activeElement);\n      if (isFocusOutsideModal) {\n        (_a = _this.startFocusTrapElement.current) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n        _this.isAutoFocusing = false;\n      }\n    });\n  };\n  Overlay.prototype.maybeRenderBackdrop = function () {\n    var _a = this.props,\n      backdropClassName = _a.backdropClassName,\n      backdropProps = _a.backdropProps,\n      hasBackdrop = _a.hasBackdrop,\n      isOpen = _a.isOpen,\n      transitionDuration = _a.transitionDuration,\n      transitionName = _a.transitionName;\n    if (hasBackdrop && isOpen) {\n      return React.createElement(CSSTransition, {\n        classNames: transitionName,\n        key: \"__backdrop\",\n        timeout: transitionDuration,\n        addEndListener: this.handleTransitionAddEnd\n      }, React.createElement(\"div\", __assign({}, backdropProps, {\n        className: classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps === null || backdropProps === void 0 ? void 0 : backdropProps.className),\n        onMouseDown: this.handleBackdropMouseDown\n      })));\n    } else {\n      return null;\n    }\n  };\n  Overlay.prototype.renderDummyElement = function (key, props) {\n    var _a = this.props,\n      transitionDuration = _a.transitionDuration,\n      transitionName = _a.transitionName;\n    return React.createElement(CSSTransition, {\n      classNames: transitionName,\n      key: key,\n      addEndListener: this.handleTransitionAddEnd,\n      timeout: transitionDuration,\n      unmountOnExit: true\n    }, React.createElement(\"div\", __assign({\n      tabIndex: 0\n    }, props)));\n  };\n  Overlay.prototype.overlayWillClose = function () {\n    document.removeEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */true);\n    document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n    var openStack = Overlay.openStack;\n    var stackIndex = openStack.indexOf(this);\n    if (stackIndex !== -1) {\n      openStack.splice(stackIndex, 1);\n      if (openStack.length > 0) {\n        var lastOpenedOverlay = Overlay.getLastOpened();\n        // Only bring focus back to last overlay if it had autoFocus _and_ enforceFocus enabled.\n        // If `autoFocus={false}`, it's likely that the overlay never received focus in the first place,\n        // so it would be surprising for us to send it there. See https://github.com/palantir/blueprint/issues/4921\n        if (lastOpenedOverlay.props.autoFocus && lastOpenedOverlay.props.enforceFocus) {\n          lastOpenedOverlay.bringFocusInsideOverlay();\n          document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus, /* useCapture */true);\n        }\n      }\n      if (openStack.filter(function (o) {\n        return o.props.usePortal && o.props.hasBackdrop;\n      }).length === 0) {\n        document.body.classList.remove(Classes.OVERLAY_OPEN);\n      }\n    }\n  };\n  Overlay.prototype.overlayWillOpen = function () {\n    var getLastOpened = Overlay.getLastOpened,\n      openStack = Overlay.openStack;\n    if (openStack.length > 0) {\n      document.removeEventListener(\"focus\", getLastOpened().handleDocumentFocus, /* useCapture */true);\n    }\n    openStack.push(this);\n    if (this.props.autoFocus) {\n      this.isAutoFocusing = true;\n      this.bringFocusInsideOverlay();\n    }\n    if (this.props.enforceFocus) {\n      // Focus events do not bubble, but setting useCapture allows us to listen in and execute\n      // our handler before all others\n      document.addEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */true);\n    }\n    if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n      document.addEventListener(\"mousedown\", this.handleDocumentClick);\n    }\n    if (this.props.hasBackdrop && this.props.usePortal) {\n      // add a class to the body to prevent scrolling of content below the overlay\n      document.body.classList.add(Classes.OVERLAY_OPEN);\n    }\n    this.lastActiveElementBeforeOpened = getActiveElement(this.containerElement.current);\n  };\n  Overlay.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Overlay\");\n  Overlay.defaultProps = {\n    autoFocus: true,\n    backdropProps: {},\n    canEscapeKeyClose: true,\n    canOutsideClickClose: true,\n    enforceFocus: true,\n    hasBackdrop: true,\n    isOpen: false,\n    lazy: true,\n    shouldReturnFocusOnClose: true,\n    transitionDuration: 300,\n    transitionName: Classes.OVERLAY,\n    usePortal: true\n  };\n  Overlay.openStack = [];\n  Overlay.getLastOpened = function () {\n    return Overlay.openStack[Overlay.openStack.length - 1];\n  };\n  return Overlay;\n}(AbstractPureComponent);\nexport { Overlay };","map":{"version":3,"names":["classNames","React","CSSTransition","TransitionGroup","AbstractPureComponent","Classes","DISPLAYNAME_PREFIX","getActiveElement","isFunction","Portal","getKeyboardFocusableElements","Overlay","_super","__extends","_this","isAutoFocusing","state","hasEverOpened","props","isOpen","containerElement","createRef","startFocusTrapElement","endFocusTrapElement","maybeRenderChild","child","tabIndex","enforceFocus","autoFocus","undefined","decoratedChild","cloneElement","className","OVERLAY_CONTENT","createElement","_a","onOpening","onOpened","onClosing","transitionDuration","transitionName","onEntering","onEntered","onExiting","onExited","handleTransitionExited","timeout","addEndListener","handleTransitionAddEnd","handleStartFocusTrapElementFocus","e","relatedTarget","current","contains","_b","focus","preventScroll","handleStartFocusTrapElementKeyDown","shiftKey","key","lastFocusableElement","pop","handleEndFocusTrapElementFocus","firstFocusableElement","shift","_c","node","shouldReturnFocusOnClose","lastActiveElementBeforeOpened","HTMLElement","onClosed","call","handleBackdropMouseDown","backdropProps","canOutsideClickClose","onClose","bringFocusInsideOverlay","onMouseDown","handleDocumentClick","eventTarget","composed","composedPath","target","stackIndex","openStack","indexOf","isClickInThisOverlayOrDescendant","slice","some","elem","isSameNode","handleDocumentFocus","Node","preventDefault","stopImmediatePropagation","handleKeyDown","canEscapeKeyClose","stopPropagation","getDerivedStateFromProps","prototype","render","lazy","children","usePortal","childrenWithTransitions","Children","map","maybeBackdrop","maybeRenderBackdrop","unshift","length","renderDummyElement","OVERLAY_START_FOCUS_TRAP","onFocus","onKeyDown","ref","push","OVERLAY_END_FOCUS_TRAP","containerClasses","OVERLAY","OVERLAY_OPEN","OVERLAY_INLINE","transitionGroup","appear","component","portalClassName","container","portalContainer","stopPropagationEvents","portalStopPropagationEvents","componentDidMount","overlayWillOpen","componentDidUpdate","prevProps","overlayWillClose","componentWillUnmount","requestAnimationFrame","activeElement","isFocusOutsideModal","backdropClassName","hasBackdrop","__assign","OVERLAY_BACKDROP","unmountOnExit","document","removeEventListener","splice","lastOpenedOverlay","getLastOpened","addEventListener","filter","o","body","classList","remove","add","displayName","concat","defaultProps"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\overlay\\overlay.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This component is DEPRECATED, and the code is frozen.\n * All changes & bugfixes should be made to Overlay2 instead.\n */\n\n/* eslint-disable @typescript-eslint/no-deprecated */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { AbstractPureComponent, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, type HTMLDivProps } from \"../../common/props\";\nimport { getActiveElement, isFunction } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\";\n\nimport type { OverlayProps } from \"./overlayProps\";\nimport { getKeyboardFocusableElements } from \"./overlayUtils\";\n\nexport interface OverlayState {\n    hasEverOpened?: boolean;\n}\n\n/**\n * Overlay component.\n *\n * @deprecated use `Overlay2` instead\n * @see https://blueprintjs.com/docs/#core/components/overlay\n */\nexport class Overlay extends AbstractPureComponent<OverlayProps, OverlayState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Overlay`;\n\n    public static defaultProps: OverlayProps = {\n        autoFocus: true,\n        backdropProps: {},\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        isOpen: false,\n        lazy: true,\n        shouldReturnFocusOnClose: true,\n        transitionDuration: 300,\n        transitionName: Classes.OVERLAY,\n        usePortal: true,\n    };\n\n    public static getDerivedStateFromProps({ isOpen: hasEverOpened }: OverlayProps) {\n        if (hasEverOpened) {\n            return { hasEverOpened };\n        }\n        return null;\n    }\n\n    private static openStack: Overlay[] = [];\n\n    private static getLastOpened = () => Overlay.openStack[Overlay.openStack.length - 1];\n\n    private isAutoFocusing = false;\n\n    private lastActiveElementBeforeOpened: Element | null | undefined;\n\n    public state: OverlayState = {\n        hasEverOpened: this.props.isOpen,\n    };\n\n    /** Ref for container element, containing all children and the backdrop */\n    public containerElement = React.createRef<HTMLDivElement>();\n\n    // An empty, keyboard-focusable div at the beginning of the Overlay content\n    private startFocusTrapElement = React.createRef<HTMLDivElement>();\n\n    // An empty, keyboard-focusable div at the end of the Overlay content\n    private endFocusTrapElement = React.createRef<HTMLDivElement>();\n\n    public render() {\n        // oh snap! no reason to render anything at all if we're being truly lazy\n        if (this.props.lazy && !this.state.hasEverOpened) {\n            return null;\n        }\n\n        const { autoFocus, children, className, enforceFocus, usePortal, isOpen } = this.props;\n\n        // TransitionGroup types require single array of children; does not support nested arrays.\n        // So we must collapse backdrop and children into one array, and every item must be wrapped in a\n        // Transition element (no ReactText allowed).\n        const childrenWithTransitions = isOpen ? React.Children.map(children, this.maybeRenderChild) ?? [] : [];\n\n        const maybeBackdrop = this.maybeRenderBackdrop();\n        if (maybeBackdrop !== null) {\n            childrenWithTransitions.unshift(maybeBackdrop);\n        }\n        if (isOpen && (autoFocus || enforceFocus) && childrenWithTransitions.length > 0) {\n            childrenWithTransitions.unshift(\n                this.renderDummyElement(\"__start\", {\n                    className: Classes.OVERLAY_START_FOCUS_TRAP,\n                    onFocus: this.handleStartFocusTrapElementFocus,\n                    onKeyDown: this.handleStartFocusTrapElementKeyDown,\n                    ref: this.startFocusTrapElement,\n                }),\n            );\n            if (enforceFocus) {\n                childrenWithTransitions.push(\n                    this.renderDummyElement(\"__end\", {\n                        className: Classes.OVERLAY_END_FOCUS_TRAP,\n                        onFocus: this.handleEndFocusTrapElementFocus,\n                        ref: this.endFocusTrapElement,\n                    }),\n                );\n            }\n        }\n\n        const containerClasses = classNames(\n            Classes.OVERLAY,\n            {\n                [Classes.OVERLAY_OPEN]: isOpen,\n                [Classes.OVERLAY_INLINE]: !usePortal,\n            },\n            className,\n        );\n\n        const transitionGroup = (\n            <div\n                aria-live=\"polite\"\n                className={containerClasses}\n                onKeyDown={this.handleKeyDown}\n                ref={this.containerElement}\n            >\n                <TransitionGroup appear={true} component={null}>\n                    {childrenWithTransitions}\n                </TransitionGroup>\n            </div>\n        );\n        if (usePortal) {\n            return (\n                <Portal\n                    className={this.props.portalClassName}\n                    container={this.props.portalContainer}\n                    stopPropagationEvents={this.props.portalStopPropagationEvents}\n                >\n                    {transitionGroup}\n                </Portal>\n            );\n        } else {\n            return transitionGroup;\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentDidUpdate(prevProps: OverlayProps) {\n        if (prevProps.isOpen && !this.props.isOpen) {\n            this.overlayWillClose();\n        } else if (!prevProps.isOpen && this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.overlayWillClose();\n    }\n\n    /**\n     * @public for testing\n     * @internal\n     */\n    public bringFocusInsideOverlay() {\n        // always delay focus manipulation to just before repaint to prevent scroll jumping\n        return this.requestAnimationFrame(() => {\n            // container element may be undefined between component mounting and Portal rendering\n            // activeElement may be undefined in some rare cases in IE\n            const activeElement = getActiveElement(this.containerElement.current);\n\n            if (this.containerElement.current == null || activeElement == null || !this.props.isOpen) {\n                return;\n            }\n\n            const container = this.containerElement.current;\n            const isFocusOutsideModal = !container.contains(activeElement);\n            if (isFocusOutsideModal) {\n                this.startFocusTrapElement.current?.focus({ preventScroll: true });\n                this.isAutoFocusing = false;\n            }\n        });\n    }\n\n    private maybeRenderChild = (child?: React.ReactNode | (() => React.ReactNode)) => {\n        if (isFunction(child)) {\n            child = child();\n        }\n\n        if (child == null) {\n            return null;\n        }\n\n        // decorate the child with a few injected props\n        const tabIndex = this.props.enforceFocus || this.props.autoFocus ? 0 : undefined;\n        const decoratedChild =\n            typeof child === \"object\" ? (\n                React.cloneElement(child as React.ReactElement, {\n                    className: classNames((child as React.ReactElement).props.className, Classes.OVERLAY_CONTENT),\n                    tabIndex,\n                })\n            ) : (\n                <span className={Classes.OVERLAY_CONTENT} tabIndex={tabIndex}>\n                    {child}\n                </span>\n            );\n\n        const { onOpening, onOpened, onClosing, transitionDuration, transitionName } = this.props;\n\n        return (\n            <CSSTransition\n                classNames={transitionName}\n                onEntering={onOpening}\n                onEntered={onOpened}\n                onExiting={onClosing}\n                onExited={this.handleTransitionExited}\n                timeout={transitionDuration}\n                addEndListener={this.handleTransitionAddEnd}\n            >\n                {decoratedChild}\n            </CSSTransition>\n        );\n    };\n\n    private maybeRenderBackdrop() {\n        const { backdropClassName, backdropProps, hasBackdrop, isOpen, transitionDuration, transitionName } =\n            this.props;\n\n        if (hasBackdrop && isOpen) {\n            return (\n                <CSSTransition\n                    classNames={transitionName}\n                    key=\"__backdrop\"\n                    timeout={transitionDuration}\n                    addEndListener={this.handleTransitionAddEnd}\n                >\n                    <div\n                        {...backdropProps}\n                        className={classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps?.className)}\n                        onMouseDown={this.handleBackdropMouseDown}\n                    />\n                </CSSTransition>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    private renderDummyElement(key: string, props: HTMLDivProps & { ref?: React.Ref<HTMLDivElement> }) {\n        const { transitionDuration, transitionName } = this.props;\n        return (\n            <CSSTransition\n                classNames={transitionName}\n                key={key}\n                addEndListener={this.handleTransitionAddEnd}\n                timeout={transitionDuration}\n                unmountOnExit={true}\n            >\n                <div tabIndex={0} {...props} />\n            </CSSTransition>\n        );\n    }\n\n    /**\n     * Ensures repeatedly pressing shift+tab keeps focus inside the Overlay. Moves focus to\n     * the `endFocusTrapElement` or the first keyboard-focusable element in the Overlay (excluding\n     * the `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    private handleStartFocusTrapElementFocus = (e: React.FocusEvent<HTMLDivElement>) => {\n        if (!this.props.enforceFocus || this.isAutoFocusing) {\n            return;\n        }\n        // e.relatedTarget will not be defined if this was a programmatic focus event, as is the\n        // case when we call this.bringFocusInsideOverlay() after a user clicked on the backdrop.\n        // Otherwise, we're handling a user interaction, and we should wrap around to the last\n        // element in this transition group.\n        if (\n            e.relatedTarget != null &&\n            this.containerElement.current?.contains(e.relatedTarget as Element) &&\n            e.relatedTarget !== this.endFocusTrapElement.current\n        ) {\n            this.endFocusTrapElement.current?.focus({ preventScroll: true });\n        }\n    };\n\n    /**\n     * Wrap around to the end of the dialog if `enforceFocus` is enabled.\n     */\n    private handleStartFocusTrapElementKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.props.enforceFocus) {\n            return;\n        }\n        if (e.shiftKey && e.key === \"Tab\") {\n            const lastFocusableElement = getKeyboardFocusableElements(this.containerElement).pop();\n            if (lastFocusableElement != null) {\n                lastFocusableElement.focus();\n            } else {\n                this.endFocusTrapElement.current?.focus({ preventScroll: true });\n            }\n        }\n    };\n\n    /**\n     * Ensures repeatedly pressing tab keeps focus inside the Overlay. Moves focus to the\n     * `startFocusTrapElement` or the last keyboard-focusable element in the Overlay (excluding the\n     * `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    private handleEndFocusTrapElementFocus = (e: React.FocusEvent<HTMLDivElement>) => {\n        // No need for this.props.enforceFocus check here because this element is only rendered\n        // when that prop is true.\n        // During user interactions, e.relatedTarget will be defined, and we should wrap around to the\n        // \"start focus trap\" element.\n        // Otherwise, we're handling a programmatic focus event, which can only happen after a user\n        // presses shift+tab from the first focusable element in the overlay.\n        if (\n            e.relatedTarget != null &&\n            this.containerElement.current?.contains(e.relatedTarget as Element) &&\n            e.relatedTarget !== this.startFocusTrapElement.current\n        ) {\n            const firstFocusableElement = getKeyboardFocusableElements(this.containerElement).shift();\n            // ensure we don't re-focus an already active element by comparing against e.relatedTarget\n            if (!this.isAutoFocusing && firstFocusableElement != null && firstFocusableElement !== e.relatedTarget) {\n                firstFocusableElement.focus();\n            } else {\n                this.startFocusTrapElement.current?.focus({ preventScroll: true });\n            }\n        } else {\n            const lastFocusableElement = getKeyboardFocusableElements(this.containerElement).pop();\n            if (lastFocusableElement != null) {\n                lastFocusableElement.focus();\n            } else {\n                // Keeps focus within Overlay even if there are no keyboard-focusable children\n                this.startFocusTrapElement.current?.focus({ preventScroll: true });\n            }\n        }\n    };\n\n    private overlayWillClose() {\n        document.removeEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n\n        const { openStack } = Overlay;\n        const stackIndex = openStack.indexOf(this);\n        if (stackIndex !== -1) {\n            openStack.splice(stackIndex, 1);\n            if (openStack.length > 0) {\n                const lastOpenedOverlay = Overlay.getLastOpened();\n                // Only bring focus back to last overlay if it had autoFocus _and_ enforceFocus enabled.\n                // If `autoFocus={false}`, it's likely that the overlay never received focus in the first place,\n                // so it would be surprising for us to send it there. See https://github.com/palantir/blueprint/issues/4921\n                if (lastOpenedOverlay.props.autoFocus && lastOpenedOverlay.props.enforceFocus) {\n                    lastOpenedOverlay.bringFocusInsideOverlay();\n                    document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus, /* useCapture */ true);\n                }\n            }\n\n            if (openStack.filter(o => o.props.usePortal && o.props.hasBackdrop).length === 0) {\n                document.body.classList.remove(Classes.OVERLAY_OPEN);\n            }\n        }\n    }\n\n    private overlayWillOpen() {\n        const { getLastOpened, openStack } = Overlay;\n        if (openStack.length > 0) {\n            document.removeEventListener(\"focus\", getLastOpened().handleDocumentFocus, /* useCapture */ true);\n        }\n        openStack.push(this);\n\n        if (this.props.autoFocus) {\n            this.isAutoFocusing = true;\n            this.bringFocusInsideOverlay();\n        }\n\n        if (this.props.enforceFocus) {\n            // Focus events do not bubble, but setting useCapture allows us to listen in and execute\n            // our handler before all others\n            document.addEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        }\n\n        if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n            document.addEventListener(\"mousedown\", this.handleDocumentClick);\n        }\n\n        if (this.props.hasBackdrop && this.props.usePortal) {\n            // add a class to the body to prevent scrolling of content below the overlay\n            document.body.classList.add(Classes.OVERLAY_OPEN);\n        }\n\n        this.lastActiveElementBeforeOpened = getActiveElement(this.containerElement.current);\n    }\n\n    private handleTransitionExited = (node: HTMLElement) => {\n        if (this.props.shouldReturnFocusOnClose && this.lastActiveElementBeforeOpened instanceof HTMLElement) {\n            this.lastActiveElementBeforeOpened.focus();\n        }\n        this.props.onClosed?.(node);\n    };\n\n    private handleBackdropMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        const { backdropProps, canOutsideClickClose, enforceFocus, onClose } = this.props;\n        if (canOutsideClickClose) {\n            onClose?.(e);\n        }\n        if (enforceFocus) {\n            this.bringFocusInsideOverlay();\n        }\n        backdropProps?.onMouseDown?.(e);\n    };\n\n    private handleDocumentClick = (e: MouseEvent) => {\n        const { canOutsideClickClose, isOpen, onClose } = this.props;\n        // get the actual target even in the Shadow DOM\n        // see https://github.com/palantir/blueprint/issues/4220\n        const eventTarget = (e.composed ? e.composedPath()[0] : e.target) as HTMLElement;\n\n        const stackIndex = Overlay.openStack.indexOf(this);\n        const isClickInThisOverlayOrDescendant = Overlay.openStack\n            .slice(stackIndex)\n            .some(({ containerElement: elem }) => {\n                // `elem` is the container of backdrop & content, so clicking directly on that container\n                // should not count as being \"inside\" the overlay.\n                return elem.current?.contains(eventTarget) && !elem.current.isSameNode(eventTarget);\n            });\n\n        if (isOpen && !isClickInThisOverlayOrDescendant && canOutsideClickClose) {\n            // casting to any because this is a native event\n            onClose?.(e as any);\n        }\n    };\n\n    /**\n     * When multiple Overlays are open, this event handler is only active for the most recently\n     * opened one to avoid Overlays competing with each other for focus.\n     */\n    private handleDocumentFocus = (e: FocusEvent) => {\n        // get the actual target even in the Shadow DOM\n        // see https://github.com/palantir/blueprint/issues/4220\n        const eventTarget = e.composed ? e.composedPath()[0] : e.target;\n        if (\n            this.props.enforceFocus &&\n            this.containerElement.current != null &&\n            eventTarget instanceof Node &&\n            !this.containerElement.current.contains(eventTarget as HTMLElement)\n        ) {\n            // prevent default focus behavior (sometimes auto-scrolls the page)\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            this.bringFocusInsideOverlay();\n        }\n    };\n\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        const { canEscapeKeyClose, onClose } = this.props;\n        if (e.key === \"Escape\" && canEscapeKeyClose) {\n            onClose?.(e);\n            // prevent other overlays from closing\n            e.stopPropagation();\n            // prevent browser-specific escape key behavior (Safari exits fullscreen)\n            e.preventDefault();\n        }\n    };\n\n    private handleTransitionAddEnd = () => {\n        // no-op\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}