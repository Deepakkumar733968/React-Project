{"ast":null,"code":"/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { isElementOfType, uniqueId } from \"../../common/utils\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\nimport { RadioCard } from \"../control-card/radioCard\";\nimport { Radio } from \"./controls\";\n/**\n * Radio group component.\n *\n * @see https://blueprintjs.com/docs/#core/components/radio.radiogroup\n */\nexport var RadioGroup = function (props) {\n  var children = props.children,\n    className = props.className,\n    disabled = props.disabled,\n    inline = props.inline,\n    label = props.label,\n    name = props.name,\n    onChange = props.onChange,\n    options = props.options,\n    selectedValue = props.selectedValue,\n    htmlProps = __rest(props, [\"children\", \"className\", \"disabled\", \"inline\", \"label\", \"name\", \"onChange\", \"options\", \"selectedValue\"]);\n  // a unique name for this group, which can be overridden by `name` prop.\n  var autoGroupName = React.useMemo(function () {\n    return nextName();\n  }, []);\n  var labelId = React.useMemo(function () {\n    return uniqueId(\"label\");\n  }, []);\n  useValidateProps(function () {\n    if (children != null && options != null) {\n      console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n    }\n  }, [children, options]);\n  var getRadioProps = React.useCallback(function (optionProps) {\n    var optionClassName = optionProps.className,\n      optionDisabled = optionProps.disabled,\n      value = optionProps.value;\n    return {\n      checked: value === selectedValue,\n      className: optionClassName,\n      disabled: optionDisabled || disabled,\n      inline: inline,\n      name: name == null ? autoGroupName : name,\n      onChange: onChange,\n      value: value\n    };\n  }, [autoGroupName, disabled, inline, name, onChange, selectedValue]);\n  var renderChildren = function () {\n    return React.Children.map(children, function (child) {\n      if (isElementOfType(child, Radio) || isElementOfType(child, RadioCard)) {\n        return React.cloneElement(\n        // Need this cast here to suppress a TS error caused by differing `ref` types for the Radio and\n        // RadioCard components. We aren't injecting a ref, so we don't need to be strict about that\n        // incompatibility.\n        child, getRadioProps(child.props));\n      }\n      return child;\n    });\n  };\n  var renderOptions = function () {\n    return options === null || options === void 0 ? void 0 : options.map(function (option) {\n      return React.createElement(Radio, __assign({}, getRadioProps(option), {\n        key: option.value,\n        labelElement: option.label || option.value\n      }));\n    });\n  };\n  return React.createElement(\"div\", __assign({\n    role: \"radiogroup\",\n    \"aria-labelledby\": label ? labelId : undefined\n  }, removeNonHTMLProps(htmlProps), {\n    className: classNames(Classes.RADIO_GROUP, className)\n  }), label && React.createElement(\"label\", {\n    className: Classes.LABEL,\n    id: labelId\n  }, label), Array.isArray(options) ? renderOptions() : renderChildren());\n};\nRadioGroup.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".RadioGroup\");\nvar counter = 0;\nfunction nextName() {\n  return \"\".concat(RadioGroup.displayName, \"-\").concat(counter++);\n}","map":{"version":3,"names":["classNames","React","Classes","DISPLAYNAME_PREFIX","removeNonHTMLProps","Errors","isElementOfType","uniqueId","useValidateProps","RadioCard","Radio","RadioGroup","props","children","className","disabled","inline","label","name","onChange","options","selectedValue","htmlProps","__rest","autoGroupName","useMemo","nextName","labelId","console","warn","RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX","getRadioProps","useCallback","optionProps","optionClassName","optionDisabled","value","checked","renderChildren","Children","map","child","cloneElement","renderOptions","option","createElement","__assign","key","labelElement","role","undefined","RADIO_GROUP","LABEL","id","Array","isArray","displayName","concat","counter"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\forms\\radioGroup.tsx"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    Classes,\n    DISPLAYNAME_PREFIX,\n    type HTMLDivProps,\n    type OptionProps,\n    type Props,\n    removeNonHTMLProps,\n} from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { isElementOfType, uniqueId } from \"../../common/utils\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\nimport { RadioCard } from \"../control-card/radioCard\";\n\nimport type { ControlProps } from \"./controlProps\";\nimport { Radio, type RadioProps } from \"./controls\";\n\nexport interface RadioGroupProps extends Props, HTMLDivProps {\n    /**\n     * Radio elements. This prop is mutually exclusive with `options`.\n     * If passing custom children, ensure options have `role=\"radio\"` or\n     * `input` with `type=\"radio\"`.\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Whether the group and _all_ its radios are disabled.\n     * Individual radios can be disabled using their `disabled` prop.\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the radio buttons are to be displayed inline horizontally.\n     */\n    inline?: boolean;\n\n    /** Optional label text to display above the radio buttons. */\n    label?: React.ReactNode;\n\n    /**\n     * Name of the group, used to link radio buttons together in HTML.\n     * If omitted, a unique name will be generated internally.\n     */\n    name?: string;\n\n    /**\n     * Callback invoked when the currently selected radio changes.\n     * Use `event.currentTarget.value` to read the currently selected value.\n     * This prop is required because this component only supports controlled usage.\n     */\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n\n    /**\n     * Array of options to render in the group. This prop is mutually exclusive\n     * with `children`: either provide an array of `OptionProps` objects or\n     * provide `<Radio>` children elements.\n     */\n    options?: readonly OptionProps[];\n\n    /** Value of the selected radio. The child with this value will be `:checked`. */\n    selectedValue?: string | number;\n}\n\n/**\n * Radio group component.\n *\n * @see https://blueprintjs.com/docs/#core/components/radio.radiogroup\n */\nexport const RadioGroup: React.FC<RadioGroupProps> = props => {\n    const { children, className, disabled, inline, label, name, onChange, options, selectedValue, ...htmlProps } =\n        props;\n\n    // a unique name for this group, which can be overridden by `name` prop.\n    const autoGroupName = React.useMemo(() => nextName(), []);\n\n    const labelId = React.useMemo(() => uniqueId(\"label\"), []);\n\n    useValidateProps(() => {\n        if (children != null && options != null) {\n            console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n        }\n    }, [children, options]);\n\n    const getRadioProps = React.useCallback(\n        (optionProps: OptionProps): Omit<RadioProps, \"ref\"> => {\n            const { className: optionClassName, disabled: optionDisabled, value } = optionProps;\n            return {\n                checked: value === selectedValue,\n                className: optionClassName,\n                disabled: optionDisabled || disabled,\n                inline,\n                name: name == null ? autoGroupName : name,\n                onChange,\n                value,\n            };\n        },\n        [autoGroupName, disabled, inline, name, onChange, selectedValue],\n    );\n\n    const renderChildren = () => {\n        return React.Children.map(children, child => {\n            if (isElementOfType(child, Radio) || isElementOfType(child, RadioCard)) {\n                return React.cloneElement(\n                    // Need this cast here to suppress a TS error caused by differing `ref` types for the Radio and\n                    // RadioCard components. We aren't injecting a ref, so we don't need to be strict about that\n                    // incompatibility.\n                    child as React.ReactElement<ControlProps>,\n                    getRadioProps(child.props as OptionProps),\n                );\n            }\n            return child;\n        });\n    };\n\n    const renderOptions = () => {\n        return options?.map(option => (\n            <Radio {...getRadioProps(option)} key={option.value} labelElement={option.label || option.value} />\n        ));\n    };\n\n    return (\n        <div\n            role=\"radiogroup\"\n            aria-labelledby={label ? labelId : undefined}\n            {...removeNonHTMLProps(htmlProps)}\n            className={classNames(Classes.RADIO_GROUP, className)}\n        >\n            {label && (\n                <label className={Classes.LABEL} id={labelId}>\n                    {label}\n                </label>\n            )}\n            {Array.isArray(options) ? renderOptions() : renderChildren()}\n        </div>\n    );\n};\n\nRadioGroup.displayName = `${DISPLAYNAME_PREFIX}.RadioGroup`;\n\nlet counter = 0;\nfunction nextName() {\n    return `${RadioGroup.displayName}-${counter++}`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}