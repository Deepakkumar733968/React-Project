{"ast":null,"code":"/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as React from \"react\";\n/**\n * A React context used to interact with the overlay stack in an application.\n * Users should take care to make sure that only _one_ of these is instantiated and used within an\n * application.\n *\n * You will likely not be using this OverlaysContext directly, it's mostly used internally by the\n * Overlay2 component.\n *\n * For more information, see the [OverlaysProvider documentation](https://blueprintjs.com/docs/#core/context/overlays-provider).\n */\nexport var OverlaysContext = React.createContext({\n  hasProvider: false,\n  stack: {\n    current: []\n  }\n});\n/**\n * Overlays context provider, necessary for the `useOverlayStack` hook.\n *\n * @see https://blueprintjs.com/docs/#core/context/overlays-provider\n */\nexport var OverlaysProvider = function (_a) {\n  var children = _a.children;\n  var stack = React.useRef([]);\n  var contextValue = React.useMemo(function () {\n    return {\n      hasProvider: true,\n      stack: stack\n    };\n  }, [stack]);\n  return React.createElement(OverlaysContext.Provider, {\n    value: contextValue\n  }, children);\n};","map":{"version":3,"names":["React","OverlaysContext","createContext","hasProvider","stack","current","OverlaysProvider","_a","children","useRef","contextValue","useMemo","createElement","Provider","value"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\context\\overlays\\overlaysProvider.tsx"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport type { OverlayInstance } from \"../../components/overlay2/overlayInstance\";\n\n// N.B. using a mutable ref for the stack is much easier to work with in the world of hooks and FCs.\n// This matches the mutable global behavior of the old Overlay implementation in Blueprint v5. An alternative\n// approach was considered with an immutable array data structure and a reducer, but that implementation\n// caused lots of unnecessary invalidation of `React.useCallback()` for document-level event handlers, which\n// led to memory leaks and bugs.\nexport interface OverlaysContextState {\n    /**\n     * Whether the context instance is being used within a tree which has an `<OverlaysProvider>`.\n     * `useOverlayStack()` will work if this is `false` in Blueprint v5, but this will be unsupported\n     * in Blueprint v6; all applications with overlays will be required to configure a provider to\n     * manage global overlay state.\n     *\n     * @see https://github.com/palantir/blueprint/wiki/Overlay2-migration\n     */\n    hasProvider: boolean;\n\n    /**\n     * The application-wide global overlay stack.\n     */\n    stack: React.MutableRefObject<OverlayInstance[]>;\n}\n\n/**\n * A React context used to interact with the overlay stack in an application.\n * Users should take care to make sure that only _one_ of these is instantiated and used within an\n * application.\n *\n * You will likely not be using this OverlaysContext directly, it's mostly used internally by the\n * Overlay2 component.\n *\n * For more information, see the [OverlaysProvider documentation](https://blueprintjs.com/docs/#core/context/overlays-provider).\n */\nexport const OverlaysContext = React.createContext<OverlaysContextState>({\n    hasProvider: false,\n    stack: { current: [] },\n});\n\nexport interface OverlaysProviderProps {\n    /** The component subtree which will have access to this overlay stack context. */\n    children: React.ReactNode;\n}\n\n/**\n * Overlays context provider, necessary for the `useOverlayStack` hook.\n *\n * @see https://blueprintjs.com/docs/#core/context/overlays-provider\n */\nexport const OverlaysProvider = ({ children }: OverlaysProviderProps) => {\n    const stack = React.useRef<OverlayInstance[]>([]);\n    const contextValue = React.useMemo(() => ({ hasProvider: true, stack }), [stack]);\n    return <OverlaysContext.Provider value={contextValue}>{children}</OverlaysContext.Provider>;\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,KAAK,MAAM,OAAO;AA0B9B;;;;;;;;;;AAUA,OAAO,IAAMC,eAAe,GAAGD,KAAK,CAACE,aAAa,CAAuB;EACrEC,WAAW,EAAE,KAAK;EAClBC,KAAK,EAAE;IAAEC,OAAO,EAAE;EAAE;CACvB,CAAC;AAOF;;;;;AAKA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,EAAmC;MAAjCC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;EACvC,IAAMJ,KAAK,GAAGJ,KAAK,CAACS,MAAM,CAAoB,EAAE,CAAC;EACjD,IAAMC,YAAY,GAAGV,KAAK,CAACW,OAAO,CAAC;IAAM,OAAC;MAAER,WAAW,EAAE,IAAI;MAAEC,KAAK,EAAAA;IAAA,CAAE;EAA7B,CAA8B,EAAE,CAACA,KAAK,CAAC,CAAC;EACjF,OAAOJ,KAAA,CAAAY,aAAA,CAACX,eAAe,CAACY,QAAQ;IAACC,KAAK,EAAEJ;EAAY,GAAGF,QAAQ,CAA4B;AAC/F,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}