{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent, Classes, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { AsyncControllableTextArea } from \"./asyncControllableTextArea\";\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\n/**\n * Text area component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text-area\n */\nvar TextArea = /** @class */function (_super) {\n  __extends(TextArea, _super);\n  function TextArea() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {};\n    // used to measure and set the height of the component on first mount\n    _this.textareaElement = null;\n    _this.handleRef = refHandler(_this, \"textareaElement\", _this.props.inputRef);\n    _this.maybeSyncHeightToScrollHeight = function () {\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      var _a = _this.props,\n        autoResize = _a.autoResize,\n        growVertically = _a.growVertically;\n      if (_this.textareaElement != null) {\n        var scrollHeight = _this.textareaElement.scrollHeight;\n        if (autoResize) {\n          // set height to 0 to force scrollHeight to be the minimum height to fit\n          // the content of the textarea\n          _this.textareaElement.style.height = \"0px\";\n          _this.textareaElement.style.height = scrollHeight.toString() + \"px\";\n          _this.setState({\n            height: scrollHeight\n          });\n        } else if (growVertically && scrollHeight > 0) {\n          // N.B. this code path will be deleted in Blueprint v6.0 when `growVertically` is removed\n          _this.setState({\n            height: scrollHeight\n          });\n        }\n      }\n      if (_this.props.autoResize && _this.textareaElement != null) {\n        // set height to 0 to force scrollHeight to be the minimum height to fit\n        // the content of the textarea\n        _this.textareaElement.style.height = \"0px\";\n        var scrollHeight = _this.textareaElement.scrollHeight;\n        _this.textareaElement.style.height = scrollHeight.toString() + \"px\";\n        _this.setState({\n          height: scrollHeight\n        });\n      }\n    };\n    _this.handleChange = function (e) {\n      var _a, _b;\n      _this.maybeSyncHeightToScrollHeight();\n      (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    return _this;\n  }\n  TextArea.prototype.componentDidMount = function () {\n    this.maybeSyncHeightToScrollHeight();\n  };\n  TextArea.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.inputRef !== this.props.inputRef) {\n      setRef(prevProps.inputRef, null);\n      this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n      setRef(this.props.inputRef, this.textareaElement);\n    }\n    if (prevProps.value !== this.props.value || prevProps.style !== this.props.style) {\n      this.maybeSyncHeightToScrollHeight();\n    }\n  };\n  TextArea.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      asyncControl = _b.asyncControl,\n      autoResize = _b.autoResize,\n      className = _b.className,\n      fill = _b.fill,\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      growVertically = _b.growVertically,\n      inputRef = _b.inputRef,\n      intent = _b.intent,\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      large = _b.large,\n      _c = _b.size,\n      size = _c === void 0 ? \"medium\" : _c,\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      small = _b.small,\n      htmlProps = __rest(_b, [\"asyncControl\", \"autoResize\", \"className\", \"fill\", \"growVertically\", \"inputRef\", \"intent\", \"large\", \"size\", \"small\"]);\n    var rootClasses = classNames(Classes.INPUT, Classes.TEXT_AREA, Classes.intentClass(intent), Classes.sizeClass(size, {\n      large: large,\n      small: small\n    }), (_a = {}, _a[Classes.FILL] = fill, _a[Classes.TEXT_AREA_AUTO_RESIZE] = autoResize, _a), className);\n    // add explicit height style while preserving user-supplied styles if they exist\n    var _d = htmlProps.style,\n      style = _d === void 0 ? {} : _d;\n    if ((autoResize || growVertically) && this.state.height != null) {\n      // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n      // so we make a new one to add a property\n      style = __assign(__assign({}, style), {\n        height: \"\".concat(this.state.height, \"px\")\n      });\n    }\n    var TextAreaComponent = asyncControl ? AsyncControllableTextArea : \"textarea\";\n    return React.createElement(TextAreaComponent, __assign({}, htmlProps, {\n      className: rootClasses,\n      onChange: this.handleChange,\n      style: style,\n      ref: this.handleRef\n    }));\n  };\n  TextArea.defaultProps = {\n    autoResize: false,\n    fill: false,\n    large: false,\n    size: \"medium\",\n    small: false\n  };\n  TextArea.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".TextArea\");\n  return TextArea;\n}(AbstractPureComponent);\nexport { TextArea };","map":{"version":3,"names":["classNames","React","AbstractPureComponent","Classes","refHandler","setRef","DISPLAYNAME_PREFIX","AsyncControllableTextArea","TextArea","_super","__extends","_this","state","textareaElement","handleRef","props","inputRef","maybeSyncHeightToScrollHeight","_a","autoResize","growVertically","scrollHeight","style","height","toString","setState","handleChange","e","_b","onChange","call","prototype","componentDidMount","componentDidUpdate","prevProps","value","render","asyncControl","className","fill","intent","large","_c","size","small","htmlProps","__rest","rootClasses","INPUT","TEXT_AREA","intentClass","sizeClass","FILL","TEXT_AREA_AUTO_RESIZE","_d","__assign","concat","TextAreaComponent","createElement","ref","defaultProps","displayName"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\forms\\textArea.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent, Classes, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, type IntentProps, type Props } from \"../../common/props\";\nimport type { Size } from \"../../common/size\";\n\nimport { AsyncControllableTextArea } from \"./asyncControllableTextArea\";\n\nexport interface TextAreaProps extends IntentProps, Props, React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler, or if working with certain libraries like __redux-form__.\n     *\n     * @default false\n     */\n    asyncControl?: boolean;\n\n    /**\n     * Whether the component should automatically resize vertically as a user types in the text input.\n     * This will disable manual resizing in the vertical dimension.\n     *\n     * @default false\n     */\n    autoResize?: boolean;\n\n    /**\n     * Whether the text area should take up the full width of its container.\n     *\n     * @default false\n     */\n    fill?: boolean;\n\n    /**\n     * Whether the text area should automatically grow vertically to accomodate content.\n     *\n     * @deprecated use the `autoResize` prop instead.\n     */\n    growVertically?: boolean;\n\n    /**\n     * Ref handler that receives HTML `<textarea>` element backing this component.\n     */\n    inputRef?: React.Ref<HTMLTextAreaElement>;\n\n    /**\n     * Whether the text area should appear with large styling.\n     *\n     * @deprecated use `size=\"large\"` instead.\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * Whether the text area should appear with small styling.\n     *\n     * @deprecated use `size=\"small\"` instead.\n     * @default false\n     */\n    small?: boolean;\n\n    /**\n     * The size styling of the text area.\n     *\n     * @default \"medium\"\n     */\n    size?: Size;\n}\n\nexport interface TextAreaState {\n    height?: number;\n}\n\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\n/**\n * Text area component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text-area\n */\nexport class TextArea extends AbstractPureComponent<TextAreaProps, TextAreaState> {\n    public static defaultProps: TextAreaProps = {\n        autoResize: false,\n        fill: false,\n        large: false,\n        size: \"medium\",\n        small: false,\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.TextArea`;\n\n    public state: TextAreaState = {};\n\n    // used to measure and set the height of the component on first mount\n    public textareaElement: HTMLTextAreaElement | null = null;\n\n    private handleRef: React.RefCallback<HTMLTextAreaElement> = refHandler(\n        this,\n        \"textareaElement\",\n        this.props.inputRef,\n    );\n\n    private maybeSyncHeightToScrollHeight = () => {\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        const { autoResize, growVertically } = this.props;\n\n        if (this.textareaElement != null) {\n            const { scrollHeight } = this.textareaElement;\n\n            if (autoResize) {\n                // set height to 0 to force scrollHeight to be the minimum height to fit\n                // the content of the textarea\n                this.textareaElement.style.height = \"0px\";\n                this.textareaElement.style.height = scrollHeight.toString() + \"px\";\n                this.setState({ height: scrollHeight });\n            } else if (growVertically && scrollHeight > 0) {\n                // N.B. this code path will be deleted in Blueprint v6.0 when `growVertically` is removed\n                this.setState({ height: scrollHeight });\n            }\n        }\n\n        if (this.props.autoResize && this.textareaElement != null) {\n            // set height to 0 to force scrollHeight to be the minimum height to fit\n            // the content of the textarea\n            this.textareaElement.style.height = \"0px\";\n\n            const { scrollHeight } = this.textareaElement;\n            this.textareaElement.style.height = scrollHeight.toString() + \"px\";\n            this.setState({ height: scrollHeight });\n        }\n    };\n\n    public componentDidMount() {\n        this.maybeSyncHeightToScrollHeight();\n    }\n\n    public componentDidUpdate(prevProps: TextAreaProps) {\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.textareaElement);\n        }\n\n        if (prevProps.value !== this.props.value || prevProps.style !== this.props.style) {\n            this.maybeSyncHeightToScrollHeight();\n        }\n    }\n\n    public render() {\n        const {\n            asyncControl,\n            autoResize,\n            className,\n            fill,\n            // eslint-disable-next-line @typescript-eslint/no-deprecated\n            growVertically,\n            inputRef,\n            intent,\n            // eslint-disable-next-line @typescript-eslint/no-deprecated\n            large,\n            size = \"medium\",\n            // eslint-disable-next-line @typescript-eslint/no-deprecated\n            small,\n            ...htmlProps\n        } = this.props;\n\n        const rootClasses = classNames(\n            Classes.INPUT,\n            Classes.TEXT_AREA,\n            Classes.intentClass(intent),\n            Classes.sizeClass(size, { large, small }),\n            {\n                [Classes.FILL]: fill,\n                [Classes.TEXT_AREA_AUTO_RESIZE]: autoResize,\n            },\n            className,\n        );\n\n        // add explicit height style while preserving user-supplied styles if they exist\n        let { style = {} } = htmlProps;\n        if ((autoResize || growVertically) && this.state.height != null) {\n            // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n            // so we make a new one to add a property\n            style = {\n                ...style,\n                height: `${this.state.height}px`,\n            };\n        }\n\n        const TextAreaComponent = asyncControl ? AsyncControllableTextArea : \"textarea\";\n\n        return (\n            <TextAreaComponent\n                {...htmlProps}\n                className={rootClasses}\n                onChange={this.handleChange}\n                style={style}\n                ref={this.handleRef}\n            />\n        );\n    }\n\n    private handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        this.maybeSyncHeightToScrollHeight();\n        this.props.onChange?.(e);\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}