{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as React from \"react\";\nvar noOpDispatch = function () {\n  return null;\n};\nexport var TooltipContext = React.createContext([{}, noOpDispatch]);\nvar tooltipContextReducer = function (state, action) {\n  switch (action.type) {\n    case \"FORCE_DISABLED_STATE\":\n      return {\n        forceDisabled: true\n      };\n    case \"RESET_DISABLED_STATE\":\n      return {};\n    default:\n      return state;\n  }\n};\nexport var TooltipProvider = function (_a) {\n  var children = _a.children,\n    forceDisable = _a.forceDisable;\n  var _b = React.useReducer(tooltipContextReducer, {}),\n    state = _b[0],\n    dispatch = _b[1];\n  var contextValue = React.useMemo(function () {\n    return [state, dispatch];\n  }, [state, dispatch]);\n  React.useEffect(function () {\n    if (forceDisable) {\n      dispatch({\n        type: \"FORCE_DISABLED_STATE\"\n      });\n    } else {\n      dispatch({\n        type: \"RESET_DISABLED_STATE\"\n      });\n    }\n  }, [forceDisable]);\n  return React.createElement(TooltipContext.Provider, {\n    value: contextValue\n  }, typeof children === \"function\" ? children(state) : children);\n};","map":{"version":3,"names":["React","noOpDispatch","TooltipContext","createContext","tooltipContextReducer","state","action","type","forceDisabled","TooltipProvider","_a","children","forceDisable","_b","useReducer","dispatch","contextValue","useMemo","useEffect","createElement","Provider","value"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\popover\\tooltipContext.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nexport interface TooltipContextState {\n    forceDisabled?: boolean;\n}\n\ntype TooltipAction = { type: \"FORCE_DISABLED_STATE\" } | { type: \"RESET_DISABLED_STATE\" };\nconst noOpDispatch: React.Dispatch<TooltipAction> = () => null;\n\nexport const TooltipContext = React.createContext<readonly [TooltipContextState, React.Dispatch<TooltipAction>]>([\n    {},\n    noOpDispatch,\n]);\n\nconst tooltipContextReducer = (state: TooltipContextState, action: TooltipAction) => {\n    switch (action.type) {\n        case \"FORCE_DISABLED_STATE\":\n            return { forceDisabled: true };\n        case \"RESET_DISABLED_STATE\":\n            return {};\n        default:\n            return state;\n    }\n};\n\ninterface TooltipProviderProps {\n    children: React.ReactNode | ((ctxState: TooltipContextState) => React.ReactNode);\n    forceDisable?: boolean;\n}\n\nexport const TooltipProvider = ({ children, forceDisable }: TooltipProviderProps) => {\n    const [state, dispatch] = React.useReducer(tooltipContextReducer, {});\n    const contextValue = React.useMemo(() => [state, dispatch] as const, [state, dispatch]);\n\n    React.useEffect(() => {\n        if (forceDisable) {\n            dispatch({ type: \"FORCE_DISABLED_STATE\" });\n        } else {\n            dispatch({ type: \"RESET_DISABLED_STATE\" });\n        }\n    }, [forceDisable]);\n\n    return (\n        <TooltipContext.Provider value={contextValue}>\n            {typeof children === \"function\" ? children(state) : children}\n        </TooltipContext.Provider>\n    );\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAO9B,IAAMC,YAAY,GAAkC,SAAAA,CAAA;EAAM,WAAI;AAAJ,CAAI;AAE9D,OAAO,IAAMC,cAAc,GAAGF,KAAK,CAACG,aAAa,CAAgE,CAC7G,EAAE,EACFF,YAAY,CACf,CAAC;AAEF,IAAMG,qBAAqB,GAAG,SAAAA,CAACC,KAA0B,EAAEC,MAAqB;EAC5E,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,sBAAsB;MACvB,OAAO;QAAEC,aAAa,EAAE;MAAI,CAAE;IAClC,KAAK,sBAAsB;MACvB,OAAO,EAAE;IACb;MACI,OAAOH,KAAK;EACpB;AACJ,CAAC;AAOD,OAAO,IAAMI,eAAe,GAAG,SAAAA,CAACC,EAAgD;MAA9CC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IAAEC,YAAY,GAAAF,EAAA,CAAAE,YAAA;EAC9C,IAAAC,EAAA,GAAoBb,KAAK,CAACc,UAAU,CAACV,qBAAqB,EAAE,EAAE,CAAC;IAA9DC,KAAK,GAAAQ,EAAA;IAAEE,QAAQ,GAAAF,EAAA,GAA+C;EACrE,IAAMG,YAAY,GAAGhB,KAAK,CAACiB,OAAO,CAAC;IAAM,QAACZ,KAAK,EAAEU,QAAQ,CAAU;EAA1B,CAA0B,EAAE,CAACV,KAAK,EAAEU,QAAQ,CAAC,CAAC;EAEvFf,KAAK,CAACkB,SAAS,CAAC;IACZ,IAAIN,YAAY,EAAE;MACdG,QAAQ,CAAC;QAAER,IAAI,EAAE;MAAsB,CAAE,CAAC;IAC9C,CAAC,MAAM;MACHQ,QAAQ,CAAC;QAAER,IAAI,EAAE;MAAsB,CAAE,CAAC;IAC9C;EACJ,CAAC,EAAE,CAACK,YAAY,CAAC,CAAC;EAElB,OACIZ,KAAA,CAAAmB,aAAA,CAACjB,cAAc,CAACkB,QAAQ;IAACC,KAAK,EAAEL;EAAY,GACvC,OAAOL,QAAQ,KAAK,UAAU,GAAGA,QAAQ,CAACN,KAAK,CAAC,GAAGM,QAAQ,CACtC;AAElC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}