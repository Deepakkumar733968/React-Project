{"ast":null,"code":"/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes } from \"../../common\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\nexport var SpinnerSize;\n(function (SpinnerSize) {\n  SpinnerSize[SpinnerSize[\"SMALL\"] = 20] = \"SMALL\";\n  SpinnerSize[SpinnerSize[\"STANDARD\"] = 50] = \"STANDARD\";\n  SpinnerSize[SpinnerSize[\"LARGE\"] = 100] = \"LARGE\";\n})(SpinnerSize || (SpinnerSize = {}));\n// see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\nvar R = 45;\nvar SPINNER_TRACK = \"M 50,50 m 0,-\".concat(R, \" a \").concat(R, \",\").concat(R, \" 0 1 1 0,\").concat(R * 2, \" a \").concat(R, \",\").concat(R, \" 0 1 1 0,-\").concat(R * 2);\n// unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\nvar PATH_LENGTH = 280;\nvar MIN_SIZE = 10;\nvar STROKE_WIDTH = 4;\nvar MIN_STROKE_WIDTH = 16;\n/**\n * Spinner component.\n *\n * @see https://blueprintjs.com/docs/#core/components/spinner\n */\nexport var Spinner = function (props) {\n  var _a;\n  var _b = props.className,\n    className = _b === void 0 ? \"\" : _b,\n    intent = props.intent,\n    value = props.value,\n    _c = props.tagName,\n    tagName = _c === void 0 ? \"div\" : _c,\n    size = props.size,\n    htmlProps = __rest(props, [\"className\", \"intent\", \"value\", \"tagName\", \"size\"]);\n  useValidateProps(function () {\n    var isSizePropSet = size != null;\n    var isSizeClassSet = className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0;\n    if (isSizePropSet && isSizeClassSet) {\n      console.warn(SPINNER_WARN_CLASSES_SIZE);\n    }\n  }, [className, size]);\n  var sizePx = getSize(size, className);\n  // keep spinner track width consistent at all sizes (down to about 10px).\n  var strokeWidth = Math.min(MIN_STROKE_WIDTH, STROKE_WIDTH * SpinnerSize.LARGE / sizePx);\n  var strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1));\n  var classes = classNames(Classes.SPINNER, Classes.intentClass(intent), (_a = {}, _a[Classes.SPINNER_NO_SPIN] = value != null, _a), className);\n  // multiple DOM elements around SVG are necessary to properly isolate animation:\n  // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n  // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n  return React.createElement(tagName, __assign({\n    \"aria-label\": \"loading\",\n    \"aria-valuemax\": 100,\n    \"aria-valuemin\": 0,\n    \"aria-valuenow\": value === undefined ? undefined : value * 100,\n    className: classes,\n    role: \"progressbar\"\n  }, htmlProps), React.createElement(tagName, {\n    className: Classes.SPINNER_ANIMATION\n  }, React.createElement(\"svg\", {\n    width: sizePx,\n    height: sizePx,\n    strokeWidth: strokeWidth.toFixed(2),\n    viewBox: getViewBox(strokeWidth)\n  }, React.createElement(\"path\", {\n    className: Classes.SPINNER_TRACK,\n    d: SPINNER_TRACK\n  }), React.createElement(\"path\", {\n    className: Classes.SPINNER_HEAD,\n    d: SPINNER_TRACK,\n    pathLength: PATH_LENGTH,\n    strokeDasharray: \"\".concat(PATH_LENGTH, \" \").concat(PATH_LENGTH),\n    strokeDashoffset: strokeOffset\n  }))));\n};\nSpinner.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Spinner\");\n/**\n * Resolve size to a pixel value.\n * Size can be set by className, props, default, or minimum constant.\n */\nvar getSize = function (size, className) {\n  if (size == null) {\n    if (className.indexOf(Classes.SMALL) >= 0) {\n      return SpinnerSize.SMALL;\n    } else if (className.indexOf(Classes.LARGE) >= 0) {\n      return SpinnerSize.LARGE;\n    }\n    return SpinnerSize.STANDARD;\n  }\n  return Math.max(MIN_SIZE, size);\n};\n/** Compute viewbox such that stroked track sits exactly at edge of image frame. */\nvar getViewBox = function (strokeWidth) {\n  var radius = R + strokeWidth / 2;\n  var viewBoxX = (50 - radius).toFixed(2);\n  var viewBoxWidth = (radius * 2).toFixed(2);\n  return \"\".concat(viewBoxX, \" \").concat(viewBoxX, \" \").concat(viewBoxWidth, \" \").concat(viewBoxWidth);\n};","map":{"version":3,"names":["classNames","React","Classes","SPINNER_WARN_CLASSES_SIZE","DISPLAYNAME_PREFIX","clamp","useValidateProps","SpinnerSize","R","SPINNER_TRACK","concat","PATH_LENGTH","MIN_SIZE","STROKE_WIDTH","MIN_STROKE_WIDTH","Spinner","props","_b","className","intent","value","_c","tagName","size","htmlProps","__rest","isSizePropSet","isSizeClassSet","indexOf","SMALL","LARGE","console","warn","sizePx","getSize","strokeWidth","Math","min","strokeOffset","classes","SPINNER","intentClass","_a","SPINNER_NO_SPIN","createElement","__assign","undefined","role","SPINNER_ANIMATION","width","height","toFixed","viewBox","getViewBox","d","SPINNER_HEAD","pathLength","strokeDasharray","strokeDashoffset","displayName","STANDARD","max","radius","viewBoxX","viewBoxWidth"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\spinner\\spinner.tsx"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Classes } from \"../../common\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, type IntentProps, type Props } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\n\nexport enum SpinnerSize {\n    SMALL = 20,\n    STANDARD = 50,\n    LARGE = 100,\n}\n\n// see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\nconst R = 45;\nconst SPINNER_TRACK = `M 50,50 m 0,-${R} a ${R},${R} 0 1 1 0,${R * 2} a ${R},${R} 0 1 1 0,-${R * 2}`;\n\n// unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\nconst PATH_LENGTH = 280;\n\nconst MIN_SIZE = 10;\nconst STROKE_WIDTH = 4;\nconst MIN_STROKE_WIDTH = 16;\n\nexport interface SpinnerProps<T extends HTMLElement = HTMLElement> extends Props, IntentProps, React.HTMLAttributes<T> {\n    /**\n     * Width and height of the spinner in pixels. The size cannot be less than\n     * 10px.\n     *\n     * Constants are available for common sizes:\n     * - `SpinnerSize.SMALL = 20px`\n     * - `SpinnerSize.STANDARD = 50px`\n     * - `SpinnerSize.LARGE = 100px`\n     *\n     * @default SpinnerSize.STANDARD = 50\n     */\n    size?: number;\n\n    /**\n     * HTML tag for the two wrapper elements. If rendering a `<Spinner>` inside\n     * an `<svg>`, change this to an SVG element like `\"g\"`.\n     *\n     * @default \"div\"\n     */\n    tagName?: keyof React.JSX.IntrinsicElements;\n\n    /**\n     * A value between 0 and 1 (inclusive) representing how far along the operation is.\n     * Values below 0 or above 1 will be interpreted as 0 or 1 respectively.\n     * Omitting this prop will result in an \"indeterminate\" spinner where the head spins indefinitely.\n     */\n    value?: number;\n}\n\n/**\n * Spinner component.\n *\n * @see https://blueprintjs.com/docs/#core/components/spinner\n */\nexport const Spinner: React.FC<SpinnerProps> = props => {\n    const { className = \"\", intent, value, tagName = \"div\", size, ...htmlProps } = props;\n\n    useValidateProps(() => {\n        const isSizePropSet = size != null;\n        const isSizeClassSet = className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0;\n        if (isSizePropSet && isSizeClassSet) {\n            console.warn(SPINNER_WARN_CLASSES_SIZE);\n        }\n    }, [className, size]);\n\n    const sizePx = getSize(size, className);\n\n    // keep spinner track width consistent at all sizes (down to about 10px).\n    const strokeWidth = Math.min(MIN_STROKE_WIDTH, (STROKE_WIDTH * SpinnerSize.LARGE) / sizePx);\n    const strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1));\n\n    const classes = classNames(\n        Classes.SPINNER,\n        Classes.intentClass(intent),\n        { [Classes.SPINNER_NO_SPIN]: value != null },\n        className,\n    );\n\n    // multiple DOM elements around SVG are necessary to properly isolate animation:\n    // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n    // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n    return React.createElement(\n        tagName,\n        {\n            \"aria-label\": \"loading\",\n            \"aria-valuemax\": 100,\n            \"aria-valuemin\": 0,\n            \"aria-valuenow\": value === undefined ? undefined : value * 100,\n            className: classes,\n            role: \"progressbar\",\n            ...htmlProps,\n        },\n        React.createElement(\n            tagName,\n            { className: Classes.SPINNER_ANIMATION },\n            <svg width={sizePx} height={sizePx} strokeWidth={strokeWidth.toFixed(2)} viewBox={getViewBox(strokeWidth)}>\n                <path className={Classes.SPINNER_TRACK} d={SPINNER_TRACK} />\n                <path\n                    className={Classes.SPINNER_HEAD}\n                    d={SPINNER_TRACK}\n                    pathLength={PATH_LENGTH}\n                    strokeDasharray={`${PATH_LENGTH} ${PATH_LENGTH}`}\n                    strokeDashoffset={strokeOffset}\n                />\n            </svg>,\n        ),\n    );\n};\n\nSpinner.displayName = `${DISPLAYNAME_PREFIX}.Spinner`;\n\n/**\n * Resolve size to a pixel value.\n * Size can be set by className, props, default, or minimum constant.\n */\nconst getSize = (size: number | undefined, className: string): number => {\n    if (size == null) {\n        if (className.indexOf(Classes.SMALL) >= 0) {\n            return SpinnerSize.SMALL;\n        } else if (className.indexOf(Classes.LARGE) >= 0) {\n            return SpinnerSize.LARGE;\n        }\n        return SpinnerSize.STANDARD;\n    }\n    return Math.max(MIN_SIZE, size);\n};\n\n/** Compute viewbox such that stroked track sits exactly at edge of image frame. */\nconst getViewBox = (strokeWidth: number): string => {\n    const radius = R + strokeWidth / 2;\n    const viewBoxX = (50 - radius).toFixed(2);\n    const viewBoxWidth = (radius * 2).toFixed(2);\n    return `${viewBoxX} ${viewBoxX} ${viewBoxWidth} ${viewBoxWidth}`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}