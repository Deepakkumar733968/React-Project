{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as React from \"react\";\nimport { isEmptyString } from \"./jsUtils\";\n/**\n * Returns true if `node` is null/undefined, false, empty string, or an array\n * composed of those. If `node` is an array, only one level of the array is\n * checked, for performance reasons.\n */\nexport function isReactNodeEmpty(node, skipArray) {\n  if (skipArray === void 0) {\n    skipArray = false;\n  }\n  return node == null || node === \"\" || node === false || !skipArray && Array.isArray(node) && (\n  // only recurse one level through arrays, for performance\n  node.length === 0 || node.every(function (n) {\n    return isReactNodeEmpty(n, true);\n  }));\n}\n/**\n * Returns true if children are a mappable children array\n *\n * @internal\n */\nexport function isReactChildrenElementOrElements(children) {\n  return !isReactNodeEmpty(children, true) && children !== true;\n}\n/**\n * Converts a React node to an element. Non-empty strings, numbers, and Fragments will be wrapped in given tag name;\n * empty strings and booleans will be discarded.\n *\n * @param child     the React node to convert\n * @param tagName   the HTML tag name to use when a wrapper element is needed\n * @param props     additional props to spread onto the element, if any. If the child is a React element and this argument\n *                  is defined, the child will be cloned and these props will be merged in.\n */\nexport function ensureElement(child, tagName, props) {\n  if (tagName === void 0) {\n    tagName = \"span\";\n  }\n  if (props === void 0) {\n    props = {};\n  }\n  if (child == null || typeof child === \"boolean\" || isEmptyString(child)) {\n    return undefined;\n  } else if (typeof child === \"string\" || typeof child === \"number\" || isReactFragment(child) || isReactNodeArray(child)) {\n    // wrap the child element\n    return React.createElement(tagName, props, child);\n  } else if (isReactElement(child)) {\n    if (Object.keys(props).length > 0) {\n      // clone the element and merge props\n      return React.cloneElement(child, props);\n    } else {\n      // nothing to do, it's a valid ReactElement\n      return child;\n    }\n  } else {\n    // child is inferred as {}\n    return undefined;\n  }\n}\nexport function isReactElement(child) {\n  return typeof child === \"object\" && typeof child.type !== \"undefined\" && typeof child.props !== \"undefined\";\n}\nfunction isReactFragment(child) {\n  // bit hacky, but generally works\n  return typeof child.type === \"symbol\";\n}\nfunction isReactNodeArray(child) {\n  return Array.isArray(child);\n}\n/**\n * Returns true if the given JSX element matches the given component type.\n *\n * NOTE: This function only checks equality of `displayName` for performance and\n * to tolerate multiple minor versions of a component being included in one\n * application bundle.\n *\n * @param element JSX element in question\n * @param ComponentType desired component type of element\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport function isElementOfType(element, ComponentType) {\n  return element != null && element.type != null && element.type.displayName != null && element.type.displayName === ComponentType.displayName;\n}\nexport function isReact18OrHigher() {\n  var majorVersion = parseInt(React.version.split(\".\")[0], 10);\n  return majorVersion >= 18;\n}","map":{"version":3,"names":["React","isEmptyString","isReactNodeEmpty","node","skipArray","Array","isArray","length","every","n","isReactChildrenElementOrElements","children","ensureElement","child","tagName","props","undefined","isReactFragment","isReactNodeArray","createElement","isReactElement","Object","keys","cloneElement","type","isElementOfType","element","ComponentType","displayName","isReact18OrHigher","majorVersion","parseInt","version","split"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\common\\utils\\reactUtils.ts"],"sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { isEmptyString } from \"./jsUtils\";\n\n/**\n * Returns true if `node` is null/undefined, false, empty string, or an array\n * composed of those. If `node` is an array, only one level of the array is\n * checked, for performance reasons.\n */\nexport function isReactNodeEmpty(node?: React.ReactNode, skipArray = false): boolean {\n    return (\n        node == null ||\n        node === \"\" ||\n        node === false ||\n        (!skipArray &&\n            Array.isArray(node) &&\n            // only recurse one level through arrays, for performance\n            (node.length === 0 || node.every(n => isReactNodeEmpty(n, true))))\n    );\n}\n\n/**\n * Returns true if children are a mappable children array\n *\n * @internal\n */\nexport function isReactChildrenElementOrElements(\n    children: React.ReactNode,\n): children is React.JSX.Element[] | React.JSX.Element {\n    return !isReactNodeEmpty(children, true) && children !== true;\n}\n\n/**\n * Converts a React node to an element. Non-empty strings, numbers, and Fragments will be wrapped in given tag name;\n * empty strings and booleans will be discarded.\n *\n * @param child     the React node to convert\n * @param tagName   the HTML tag name to use when a wrapper element is needed\n * @param props     additional props to spread onto the element, if any. If the child is a React element and this argument\n *                  is defined, the child will be cloned and these props will be merged in.\n */\nexport function ensureElement(\n    child: React.ReactNode | undefined,\n    tagName: keyof React.JSX.IntrinsicElements = \"span\",\n    props: React.HTMLProps<HTMLElement> = {},\n) {\n    if (child == null || typeof child === \"boolean\" || isEmptyString(child)) {\n        return undefined;\n    } else if (\n        typeof child === \"string\" ||\n        typeof child === \"number\" ||\n        isReactFragment(child) ||\n        isReactNodeArray(child)\n    ) {\n        // wrap the child element\n        return React.createElement(tagName, props, child);\n    } else if (isReactElement(child)) {\n        if (Object.keys(props).length > 0) {\n            // clone the element and merge props\n            return React.cloneElement(child, props);\n        } else {\n            // nothing to do, it's a valid ReactElement\n            return child;\n        }\n    } else {\n        // child is inferred as {}\n        return undefined;\n    }\n}\n\nexport function isReactElement<T = any>(child: React.ReactNode): child is React.ReactElement<T> {\n    return (\n        typeof child === \"object\" &&\n        typeof (child as any).type !== \"undefined\" &&\n        typeof (child as any).props !== \"undefined\"\n    );\n}\n\nfunction isReactFragment(child: React.ReactNode): child is Iterable<React.ReactNode> {\n    // bit hacky, but generally works\n    return typeof (child as any).type === \"symbol\";\n}\n\nfunction isReactNodeArray(child: React.ReactNode): child is React.ReactNode[] {\n    return Array.isArray(child);\n}\n\n/**\n * Returns true if the given JSX element matches the given component type.\n *\n * NOTE: This function only checks equality of `displayName` for performance and\n * to tolerate multiple minor versions of a component being included in one\n * application bundle.\n *\n * @param element JSX element in question\n * @param ComponentType desired component type of element\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport function isElementOfType<P = {}>(\n    element: any,\n    ComponentType: React.ComponentType<P>,\n): element is React.ReactElement<P> {\n    return (\n        element != null &&\n        element.type != null &&\n        element.type.displayName != null &&\n        element.type.displayName === ComponentType.displayName\n    );\n}\n\nexport function isReact18OrHigher(): boolean {\n    const majorVersion = parseInt(React.version.split(\".\")[0], 10);\n    return majorVersion >= 18;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}