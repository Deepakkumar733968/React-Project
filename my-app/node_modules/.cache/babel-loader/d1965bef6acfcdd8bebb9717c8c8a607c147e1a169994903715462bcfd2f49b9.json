{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { ChevronDown, ChevronUp } from \"@blueprintjs/icons\";\nimport { AbstractPureComponent, Classes, DISPLAYNAME_PREFIX, Intent, Position, refHandler, removeNonHTMLProps, setRef, Utils } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { Button } from \"../button/buttons\";\nimport { ControlGroup } from \"./controlGroup\";\nimport { InputGroup } from \"./inputGroup\";\nimport { clampValue, getValueOrEmptyValue, isValidNumericKeyboardEvent, isValueNumeric, parseStringToStringNumber, sanitizeNumericInput, toLocaleString, toMaxPrecision } from \"./numericInputUtils\";\nvar IncrementDirection;\n(function (IncrementDirection) {\n  IncrementDirection[IncrementDirection[\"DOWN\"] = -1] = \"DOWN\";\n  IncrementDirection[IncrementDirection[\"UP\"] = 1] = \"UP\";\n})(IncrementDirection || (IncrementDirection = {}));\nvar NON_HTML_PROPS = [\"allowNumericCharactersOnly\", \"buttonPosition\", \"clampValueOnBlur\", \"className\", \"defaultValue\", \"majorStepSize\", \"minorStepSize\", \"onButtonClick\", \"onValueChange\", \"selectAllOnFocus\", \"selectAllOnIncrement\", \"stepSize\"];\n/**\n * Numeric input component.\n *\n * @see https://blueprintjs.com/docs/#core/components/numeric-input\n */\nvar NumericInput = /** @class */function (_super) {\n  __extends(NumericInput, _super);\n  function NumericInput() {\n    var _a;\n    var _this = _super.apply(this, arguments) || this;\n    _this.numericInputId = Utils.uniqueId(\"numericInput\");\n    _this.state = {\n      currentImeInputInvalid: false,\n      shouldSelectAfterUpdate: false,\n      stepMaxPrecision: NumericInput.getStepMaxPrecision(_this.props),\n      value: getValueOrEmptyValue((_a = _this.props.value) !== null && _a !== void 0 ? _a : _this.props.defaultValue)\n    };\n    // updating these flags need not trigger re-renders, so don't include them in this.state.\n    _this.didPasteEventJustOccur = false;\n    _this.delta = 0;\n    _this.inputElement = null;\n    _this.inputRef = refHandler(_this, \"inputElement\", _this.props.inputRef);\n    _this.incrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.UP);\n    _this.decrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.DOWN);\n    _this.getCurrentValueAsNumber = function () {\n      return Number(parseStringToStringNumber(_this.state.value, _this.props.locale));\n    };\n    _this.handleButtonClick = function (e, direction) {\n      var _a, _b;\n      var delta = _this.updateDelta(direction, e);\n      var nextValue = _this.incrementValue(delta);\n      (_b = (_a = _this.props).onButtonClick) === null || _b === void 0 ? void 0 : _b.call(_a, Number(parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\n    };\n    _this.stopContinuousChange = function () {\n      _this.delta = 0;\n      _this.clearTimeouts();\n      clearInterval(_this.intervalId);\n      document.removeEventListener(\"mouseup\", _this.stopContinuousChange);\n    };\n    _this.handleContinuousChange = function () {\n      var _a, _b, _c, _d;\n      // If either min or max prop is set, when reaching the limit\n      // the button will be disabled and stopContinuousChange will be never fired,\n      // hence the need to check on each iteration to properly clear the timeout\n      if (_this.props.min !== undefined || _this.props.max !== undefined) {\n        var min = (_a = _this.props.min) !== null && _a !== void 0 ? _a : -Infinity;\n        var max = (_b = _this.props.max) !== null && _b !== void 0 ? _b : Infinity;\n        var valueAsNumber = _this.getCurrentValueAsNumber();\n        if (valueAsNumber <= min || valueAsNumber >= max) {\n          _this.stopContinuousChange();\n          return;\n        }\n      }\n      var nextValue = _this.incrementValue(_this.delta);\n      (_d = (_c = _this.props).onButtonClick) === null || _d === void 0 ? void 0 : _d.call(_c, Number(parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\n    };\n    // Callbacks - Input\n    // =================\n    _this.handleInputFocus = function (e) {\n      var _a, _b;\n      // update this state flag to trigger update for input selection (see componentDidUpdate)\n      _this.setState({\n        shouldSelectAfterUpdate: _this.props.selectAllOnFocus\n      });\n      (_b = (_a = _this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleInputBlur = function (e) {\n      var _a, _b;\n      // always disable this flag on blur so it's ready for next time.\n      _this.setState({\n        shouldSelectAfterUpdate: false\n      });\n      if (_this.props.clampValueOnBlur) {\n        var value = e.target.value;\n        _this.handleNextValue(_this.roundAndClampValue(value));\n      }\n      (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleInputKeyDown = function (e) {\n      var _a, _b;\n      if (_this.props.disabled || _this.props.readOnly) {\n        return;\n      }\n      var direction = Utils.getArrowKeyDirection(e, [\"ArrowDown\"], [\"ArrowUp\"]);\n      if (direction !== undefined) {\n        // when the input field has focus, some key combinations will modify\n        // the field's selection range. we'll actually want to select all\n        // text in the field after we modify the value on the following\n        // lines. preventing the default selection behavior lets us do that\n        // without interference.\n        e.preventDefault();\n        var delta = _this.updateDelta(direction, e);\n        _this.incrementValue(delta);\n      }\n      (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleCompositionEnd = function (e) {\n      if (_this.props.allowNumericCharactersOnly) {\n        _this.handleNextValue(sanitizeNumericInput(e.data, _this.props.locale));\n        _this.setState({\n          currentImeInputInvalid: false\n        });\n      }\n    };\n    _this.handleCompositionUpdate = function (e) {\n      if (_this.props.allowNumericCharactersOnly) {\n        var data = e.data;\n        var sanitizedValue = sanitizeNumericInput(data, _this.props.locale);\n        if (sanitizedValue.length === 0 && data.length > 0) {\n          _this.setState({\n            currentImeInputInvalid: true\n          });\n        } else {\n          _this.setState({\n            currentImeInputInvalid: false\n          });\n        }\n      }\n    };\n    _this.handleInputKeyPress = function (e) {\n      var _a, _b;\n      // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n      // e.key is not trustworthy in onKeyDown in all browsers.\n      if (_this.props.allowNumericCharactersOnly && !isValidNumericKeyboardEvent(e, _this.props.locale)) {\n        e.preventDefault();\n      }\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      (_b = (_a = _this.props).onKeyPress) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleInputPaste = function (e) {\n      var _a, _b;\n      _this.didPasteEventJustOccur = true;\n      (_b = (_a = _this.props).onPaste) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n    _this.handleInputChange = function (value) {\n      var nextValue = value;\n      if (_this.props.allowNumericCharactersOnly && _this.didPasteEventJustOccur) {\n        _this.didPasteEventJustOccur = false;\n        nextValue = sanitizeNumericInput(value, _this.props.locale);\n      }\n      _this.handleNextValue(nextValue);\n      _this.setState({\n        shouldSelectAfterUpdate: false\n      });\n    };\n    return _this;\n  }\n  NumericInput.getDerivedStateFromProps = function (props, state) {\n    var _a, _b;\n    var nextState = {\n      prevMaxProp: props.max,\n      prevMinProp: props.min\n    };\n    var didMinChange = props.min !== state.prevMinProp;\n    var didMaxChange = props.max !== state.prevMaxProp;\n    var didBoundsChange = didMinChange || didMaxChange;\n    // in controlled mode, use props.value\n    // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n    var value = (_b = (_a = props.value) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : state.value;\n    var stepMaxPrecision = NumericInput.getStepMaxPrecision(props);\n    var sanitizedValue = value !== NumericInput.VALUE_EMPTY ? NumericInput.roundAndClampValue(value, stepMaxPrecision, props.min, props.max, 0, props.locale) : NumericInput.VALUE_EMPTY;\n    // if a new min and max were provided that cause the existing value to fall\n    // outside of the new bounds, then clamp the value to the new valid range.\n    if (didBoundsChange && sanitizedValue !== state.value) {\n      return __assign(__assign({}, nextState), {\n        stepMaxPrecision: stepMaxPrecision,\n        value: sanitizedValue\n      });\n    }\n    return __assign(__assign({}, nextState), {\n      stepMaxPrecision: stepMaxPrecision,\n      value: value\n    });\n  };\n  // Value Helpers\n  // =============\n  NumericInput.getStepMaxPrecision = function (props) {\n    if (props.minorStepSize != null) {\n      return Utils.countDecimalPlaces(props.minorStepSize);\n    } else {\n      return Utils.countDecimalPlaces(props.stepSize);\n    }\n  };\n  NumericInput.roundAndClampValue = function (value, stepMaxPrecision, min, max, delta, locale) {\n    if (delta === void 0) {\n      delta = 0;\n    }\n    if (!isValueNumeric(value, locale)) {\n      return NumericInput.VALUE_EMPTY;\n    }\n    var currentValue = parseStringToStringNumber(value, locale);\n    var nextValue = toMaxPrecision(Number(currentValue) + delta, stepMaxPrecision);\n    var clampedValue = clampValue(nextValue, min, max);\n    return toLocaleString(clampedValue, locale);\n  };\n  NumericInput.prototype.render = function () {\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    var _a = this.props,\n      buttonPosition = _a.buttonPosition,\n      className = _a.className,\n      fill = _a.fill,\n      large = _a.large,\n      _b = _a.size,\n      size = _b === void 0 ? \"medium\" : _b,\n      small = _a.small;\n    var containerClasses = classNames(Classes.NUMERIC_INPUT, Classes.sizeClass(size, {\n      large: large,\n      small: small\n    }), className);\n    var buttons = this.renderButtons();\n    return React.createElement(ControlGroup, {\n      className: containerClasses,\n      fill: fill\n    }, buttonPosition === Position.LEFT && buttons, this.renderInput(), buttonPosition === Position.RIGHT && buttons);\n  };\n  NumericInput.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a, _b, _c;\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n    if (prevProps.inputRef !== this.props.inputRef) {\n      setRef(prevProps.inputRef, null);\n      this.inputRef = refHandler(this, \"inputElement\", this.props.inputRef);\n      setRef(this.props.inputRef, this.inputElement);\n    }\n    if (this.state.shouldSelectAfterUpdate) {\n      (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.setSelectionRange(0, this.state.value.length);\n    }\n    var didMinChange = this.props.min !== prevProps.min;\n    var didMaxChange = this.props.max !== prevProps.max;\n    var didBoundsChange = didMinChange || didMaxChange;\n    var didLocaleChange = this.props.locale !== prevProps.locale;\n    var didValueChange = this.state.value !== prevState.value;\n    if (didBoundsChange && didValueChange || didLocaleChange && prevState.value !== NumericInput.VALUE_EMPTY) {\n      // we clamped the value due to a bounds change, so we should fire the change callback\n      var valueToParse = didLocaleChange ? prevState.value : this.state.value;\n      var valueAsString = parseStringToStringNumber(valueToParse, prevProps.locale);\n      var localizedValue = toLocaleString(+valueAsString, this.props.locale);\n      (_c = (_b = this.props).onValueChange) === null || _c === void 0 ? void 0 : _c.call(_b, +valueAsString, localizedValue, this.inputElement);\n    }\n  };\n  NumericInput.prototype.validateProps = function (nextProps) {\n    var majorStepSize = nextProps.majorStepSize,\n      max = nextProps.max,\n      min = nextProps.min,\n      minorStepSize = nextProps.minorStepSize,\n      stepSize = nextProps.stepSize,\n      value = nextProps.value;\n    if (min != null && max != null && min > max) {\n      console.error(Errors.NUMERIC_INPUT_MIN_MAX);\n    }\n    if (stepSize <= 0) {\n      console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n    }\n    if (minorStepSize && minorStepSize <= 0) {\n      console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n    }\n    if (majorStepSize && majorStepSize <= 0) {\n      console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n    }\n    if (minorStepSize && minorStepSize > stepSize) {\n      console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n    }\n    if (majorStepSize && majorStepSize < stepSize) {\n      console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n    }\n    // controlled mode\n    if (value != null) {\n      var stepMaxPrecision = NumericInput.getStepMaxPrecision(nextProps);\n      var sanitizedValue = NumericInput.roundAndClampValue(value.toString(), stepMaxPrecision, min, max, 0, this.props.locale);\n      var valueDoesNotMatch = sanitizedValue !== value.toString();\n      var localizedValue = toLocaleString(Number(parseStringToStringNumber(value, this.props.locale)), this.props.locale);\n      var isNotLocalized = sanitizedValue !== localizedValue;\n      if (valueDoesNotMatch && isNotLocalized) {\n        console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n      }\n    }\n  };\n  // Render Helpers\n  // ==============\n  NumericInput.prototype.renderButtons = function () {\n    var _a = this.props,\n      intent = _a.intent,\n      max = _a.max,\n      min = _a.min,\n      locale = _a.locale;\n    var value = parseStringToStringNumber(this.state.value, locale);\n    var disabled = this.props.disabled || this.props.readOnly;\n    var isIncrementDisabled = max !== undefined && value !== \"\" && +value >= max;\n    var isDecrementDisabled = min !== undefined && value !== \"\" && +value <= min;\n    return React.createElement(ButtonGroup, {\n      className: Classes.FIXED,\n      key: \"button-group\",\n      vertical: true\n    }, React.createElement(Button, __assign({\n      \"aria-label\": \"increment\",\n      \"aria-controls\": this.numericInputId,\n      disabled: disabled || isIncrementDisabled,\n      icon: React.createElement(ChevronUp, null),\n      intent: intent\n    }, this.incrementButtonHandlers)), React.createElement(Button, __assign({\n      \"aria-label\": \"decrement\",\n      \"aria-controls\": this.numericInputId,\n      disabled: disabled || isDecrementDisabled,\n      icon: React.createElement(ChevronDown, null),\n      intent: intent\n    }, this.decrementButtonHandlers)));\n  };\n  NumericInput.prototype.renderInput = function () {\n    var inputGroupHtmlProps = removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n    var valueAsNumber = this.getCurrentValueAsNumber();\n    return React.createElement(InputGroup, __assign({\n      asyncControl: this.props.asyncControl,\n      autoComplete: \"off\",\n      id: this.numericInputId,\n      role: this.props.allowNumericCharactersOnly ? \"spinbutton\" : undefined\n    }, inputGroupHtmlProps, {\n      \"aria-valuemax\": this.props.max,\n      \"aria-valuemin\": this.props.min,\n      \"aria-valuenow\": valueAsNumber,\n      intent: this.state.currentImeInputInvalid ? Intent.DANGER : this.props.intent,\n      inputClassName: this.props.inputClassName,\n      inputRef: this.inputRef,\n      inputSize: this.props.inputSize,\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      large: this.props.large,\n      leftElement: this.props.leftElement,\n      leftIcon: this.props.leftIcon,\n      onFocus: this.handleInputFocus,\n      onBlur: this.handleInputBlur,\n      onCompositionEnd: this.handleCompositionEnd,\n      onCompositionUpdate: this.handleCompositionUpdate,\n      onKeyDown: this.handleInputKeyDown,\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      onKeyPress: this.handleInputKeyPress,\n      onPaste: this.handleInputPaste,\n      onValueChange: this.handleInputChange,\n      rightElement: this.props.rightElement,\n      size: this.props.size,\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      small: this.props.small,\n      value: this.state.value\n    }));\n  };\n  // Callbacks - Buttons\n  // ===================\n  NumericInput.prototype.getButtonEventHandlers = function (direction) {\n    var _this = this;\n    return {\n      // keydown is fired repeatedly when held so it's implicitly continuous\n      onKeyDown: function (evt) {\n        if (!_this.props.disabled && Utils.isKeyboardClick(evt)) {\n          _this.handleButtonClick(evt, direction);\n        }\n      },\n      onMouseDown: function (evt) {\n        if (!_this.props.disabled) {\n          _this.handleButtonClick(evt, direction);\n          _this.startContinuousChange();\n        }\n      }\n    };\n  };\n  NumericInput.prototype.startContinuousChange = function () {\n    var _this = this;\n    // The button's onMouseUp event handler doesn't fire if the user\n    // releases outside of the button, so we need to watch all the way\n    // from the top.\n    document.addEventListener(\"mouseup\", this.stopContinuousChange);\n    // Initial delay is slightly longer to prevent the user from\n    // accidentally triggering the continuous increment/decrement.\n    this.setTimeout(function () {\n      _this.intervalId = window.setInterval(_this.handleContinuousChange, NumericInput.CONTINUOUS_CHANGE_INTERVAL);\n    }, NumericInput.CONTINUOUS_CHANGE_DELAY);\n  };\n  // Data logic\n  // ==========\n  NumericInput.prototype.handleNextValue = function (valueAsString) {\n    var _a, _b;\n    if (this.props.value == null) {\n      this.setState({\n        value: valueAsString\n      });\n    }\n    (_b = (_a = this.props).onValueChange) === null || _b === void 0 ? void 0 : _b.call(_a, Number(parseStringToStringNumber(valueAsString, this.props.locale)), valueAsString, this.inputElement);\n  };\n  NumericInput.prototype.incrementValue = function (delta) {\n    // pretend we're incrementing from 0 if currValue is empty\n    var currValue = this.state.value === NumericInput.VALUE_EMPTY ? NumericInput.VALUE_ZERO : this.state.value;\n    var nextValue = this.roundAndClampValue(currValue, delta);\n    if (nextValue !== this.state.value) {\n      this.handleNextValue(nextValue);\n      this.setState({\n        shouldSelectAfterUpdate: this.props.selectAllOnIncrement\n      });\n    }\n    // return value used in continuous change updates\n    return nextValue;\n  };\n  NumericInput.prototype.getIncrementDelta = function (direction, isShiftKeyPressed, isAltKeyPressed) {\n    var _a = this.props,\n      majorStepSize = _a.majorStepSize,\n      minorStepSize = _a.minorStepSize,\n      stepSize = _a.stepSize;\n    if (isShiftKeyPressed && majorStepSize != null) {\n      return direction * majorStepSize;\n    } else if (isAltKeyPressed && minorStepSize != null) {\n      return direction * minorStepSize;\n    } else {\n      return direction * stepSize;\n    }\n  };\n  NumericInput.prototype.roundAndClampValue = function (value, delta) {\n    if (delta === void 0) {\n      delta = 0;\n    }\n    return NumericInput.roundAndClampValue(value, this.state.stepMaxPrecision, this.props.min, this.props.max, delta, this.props.locale);\n  };\n  NumericInput.prototype.updateDelta = function (direction, e) {\n    this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n    return this.delta;\n  };\n  NumericInput.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".NumericInput\");\n  NumericInput.VALUE_EMPTY = \"\";\n  NumericInput.VALUE_ZERO = \"0\";\n  NumericInput.defaultProps = {\n    allowNumericCharactersOnly: true,\n    buttonPosition: Position.RIGHT,\n    clampValueOnBlur: false,\n    defaultValue: NumericInput.VALUE_EMPTY,\n    large: false,\n    majorStepSize: 10,\n    minorStepSize: 0.1,\n    selectAllOnFocus: false,\n    selectAllOnIncrement: false,\n    size: \"medium\",\n    small: false,\n    stepSize: 1\n  };\n  NumericInput.CONTINUOUS_CHANGE_DELAY = 300;\n  NumericInput.CONTINUOUS_CHANGE_INTERVAL = 100;\n  return NumericInput;\n}(AbstractPureComponent);\nexport { NumericInput };","map":{"version":3,"names":["classNames","React","ChevronDown","ChevronUp","AbstractPureComponent","Classes","DISPLAYNAME_PREFIX","Intent","Position","refHandler","removeNonHTMLProps","setRef","Utils","Errors","ButtonGroup","Button","ControlGroup","InputGroup","clampValue","getValueOrEmptyValue","isValidNumericKeyboardEvent","isValueNumeric","parseStringToStringNumber","sanitizeNumericInput","toLocaleString","toMaxPrecision","IncrementDirection","NON_HTML_PROPS","NumericInput","_super","__extends","_this","numericInputId","uniqueId","state","currentImeInputInvalid","shouldSelectAfterUpdate","stepMaxPrecision","getStepMaxPrecision","props","value","_a","defaultValue","didPasteEventJustOccur","delta","inputElement","inputRef","incrementButtonHandlers","getButtonEventHandlers","UP","decrementButtonHandlers","DOWN","getCurrentValueAsNumber","Number","locale","handleButtonClick","e","direction","updateDelta","nextValue","incrementValue","_b","onButtonClick","call","stopContinuousChange","clearTimeouts","clearInterval","intervalId","document","removeEventListener","handleContinuousChange","min","undefined","max","Infinity","valueAsNumber","_d","_c","handleInputFocus","setState","selectAllOnFocus","onFocus","handleInputBlur","clampValueOnBlur","target","handleNextValue","roundAndClampValue","onBlur","handleInputKeyDown","disabled","readOnly","getArrowKeyDirection","preventDefault","onKeyDown","handleCompositionEnd","allowNumericCharactersOnly","data","handleCompositionUpdate","sanitizedValue","length","handleInputKeyPress","onKeyPress","handleInputPaste","onPaste","handleInputChange","getDerivedStateFromProps","nextState","prevMaxProp","prevMinProp","didMinChange","didMaxChange","didBoundsChange","toString","VALUE_EMPTY","__assign","minorStepSize","countDecimalPlaces","stepSize","currentValue","clampedValue","prototype","render","buttonPosition","className","fill","large","size","small","containerClasses","NUMERIC_INPUT","sizeClass","buttons","renderButtons","createElement","LEFT","renderInput","RIGHT","componentDidUpdate","prevProps","prevState","setSelectionRange","didLocaleChange","didValueChange","valueToParse","valueAsString","localizedValue","onValueChange","validateProps","nextProps","majorStepSize","console","error","NUMERIC_INPUT_MIN_MAX","NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE","NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE","NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE","NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND","NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND","valueDoesNotMatch","isNotLocalized","warn","NUMERIC_INPUT_CONTROLLED_VALUE_INVALID","intent","isIncrementDisabled","isDecrementDisabled","FIXED","key","vertical","icon","inputGroupHtmlProps","asyncControl","autoComplete","id","role","DANGER","inputClassName","inputSize","leftElement","leftIcon","onCompositionEnd","onCompositionUpdate","rightElement","evt","isKeyboardClick","onMouseDown","startContinuousChange","addEventListener","setTimeout","window","setInterval","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","currValue","VALUE_ZERO","selectAllOnIncrement","getIncrementDelta","isShiftKeyPressed","isAltKeyPressed","shiftKey","altKey","displayName","concat","defaultProps"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\forms\\numericInput.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { ChevronDown, ChevronUp } from \"@blueprintjs/icons\";\n\nimport {\n    AbstractPureComponent,\n    Classes,\n    DISPLAYNAME_PREFIX,\n    type HTMLInputProps,\n    Intent,\n    Position,\n    refHandler,\n    removeNonHTMLProps,\n    setRef,\n    Utils,\n} from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport type { Size } from \"../../common/size\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { Button } from \"../button/buttons\";\n\nimport { ControlGroup } from \"./controlGroup\";\nimport { InputGroup } from \"./inputGroup\";\nimport type { InputSharedProps } from \"./inputSharedProps\";\nimport {\n    clampValue,\n    getValueOrEmptyValue,\n    isValidNumericKeyboardEvent,\n    isValueNumeric,\n    parseStringToStringNumber,\n    sanitizeNumericInput,\n    toLocaleString,\n    toMaxPrecision,\n} from \"./numericInputUtils\";\n\nexport interface NumericInputProps extends InputSharedProps {\n    /**\n     * Whether to allow only floating-point number characters in the field,\n     * mimicking the native `input[type=\"number\"]`.\n     *\n     * @default true\n     */\n    allowNumericCharactersOnly?: boolean;\n\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler.\n     */\n    asyncControl?: boolean;\n\n    /**\n     * The position of the buttons with respect to the input field.\n     *\n     * @default Position.RIGHT\n     */\n    buttonPosition?: typeof Position.LEFT | typeof Position.RIGHT | \"none\";\n\n    /**\n     * Whether the value should be clamped to `[min, max]` on blur.\n     * The value will be clamped to each bound only if the bound is defined.\n     * Note that native `input[type=\"number\"]` controls do *NOT* clamp on blur.\n     *\n     * @default false\n     */\n    clampValueOnBlur?: boolean;\n\n    /**\n     * In uncontrolled mode, this sets the default value of the input.\n     * Note that this value is only used upon component instantiation and changes to this prop\n     * during the component lifecycle will be ignored.\n     *\n     * @default \"\"\n     */\n    defaultValue?: number | string;\n    /**\n     * If set to `true`, the input will display with larger styling.\n     * This is equivalent to setting `Classes.LARGE` via className on the\n     * parent control group and on the child input group.\n     *\n     * @deprecated use size=\"large\" instead\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * The locale name, which is passed to the component to format the number and allowing to type the number in the specific locale.\n     * [See MDN documentation for more info about browser locale identification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n     *\n     * @default \"\"\n     */\n    locale?: string;\n\n    /**\n     * The increment between successive values when <kbd>shift</kbd> is held.\n     * Pass explicit `null` value to disable this interaction.\n     *\n     * @default 10\n     */\n    majorStepSize?: number | null;\n\n    /** The maximum value of the input. */\n    max?: number;\n\n    /** The minimum value of the input. */\n    min?: number;\n\n    /**\n     * The increment between successive values when <kbd>alt</kbd> is held.\n     * Pass explicit `null` value to disable this interaction.\n     *\n     * @default 0.1\n     */\n    minorStepSize?: number | null;\n\n    /**\n     * Whether the entire text field should be selected on focus.\n     *\n     * @default false\n     */\n    selectAllOnFocus?: boolean;\n\n    /**\n     * Whether the entire text field should be selected on increment.\n     *\n     * @default false\n     */\n    selectAllOnIncrement?: boolean;\n\n    /**\n     * If set to `true`, the input will display with smaller styling.\n     * This is equivalent to setting `Classes.SMALL` via className on the\n     * parent control group and on the child input group.\n     *\n     * @deprecated use size=\"small\" instead\n     * @default false\n     */\n    small?: boolean;\n\n    /**\n     * Size of the input. If given a numeric value, and `inputSize` is not defined, then this will be provided as the\n     * `size` attribute for the underyling native HTML input element. Passing a numeric value this way is deprecated,\n     * use the `inputSize` prop instead.\n     *\n     * @default \"medium\"\n     */\n    size?: Size | HTMLInputProps[\"size\"];\n\n    /**\n     * Alias for the native HTML input `size` attribute.\n     * see: https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/size\n     */\n    inputSize?: HTMLInputProps[\"size\"];\n\n    /**\n     * The increment between successive values when no modifier keys are held.\n     *\n     * @default 1\n     */\n    stepSize?: number;\n\n    /**\n     * The value to display in the input field.\n     */\n    value?: number | string;\n\n    /** The callback invoked when the value changes due to a button click. */\n    onButtonClick?(valueAsNumber: number, valueAsString: string): void;\n\n    /** The callback invoked when the value changes due to typing, arrow keys, or button clicks. */\n    onValueChange?(valueAsNumber: number, valueAsString: string, inputElement: HTMLInputElement | null): void;\n}\n\nexport interface NumericInputState {\n    currentImeInputInvalid: boolean;\n    prevMinProp?: number;\n    prevMaxProp?: number;\n    shouldSelectAfterUpdate: boolean;\n    stepMaxPrecision: number;\n    value: string;\n}\n\nenum IncrementDirection {\n    DOWN = -1,\n    UP = +1,\n}\n\nconst NON_HTML_PROPS: Array<keyof NumericInputProps> = [\n    \"allowNumericCharactersOnly\",\n    \"buttonPosition\",\n    \"clampValueOnBlur\",\n    \"className\",\n    \"defaultValue\",\n    \"majorStepSize\",\n    \"minorStepSize\",\n    \"onButtonClick\",\n    \"onValueChange\",\n    \"selectAllOnFocus\",\n    \"selectAllOnIncrement\",\n    \"stepSize\",\n];\n\ntype ButtonEventHandlers = Required<Pick<React.HTMLAttributes<HTMLElement>, \"onKeyDown\" | \"onMouseDown\">>;\n\n/**\n * Numeric input component.\n *\n * @see https://blueprintjs.com/docs/#core/components/numeric-input\n */\nexport class NumericInput extends AbstractPureComponent<\n    Omit<HTMLInputProps, \"size\"> & NumericInputProps,\n    NumericInputState\n> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.NumericInput`;\n\n    public static VALUE_EMPTY = \"\";\n\n    public static VALUE_ZERO = \"0\";\n\n    private numericInputId = Utils.uniqueId(\"numericInput\");\n\n    public static defaultProps: NumericInputProps = {\n        allowNumericCharactersOnly: true,\n        buttonPosition: Position.RIGHT,\n        clampValueOnBlur: false,\n        defaultValue: NumericInput.VALUE_EMPTY,\n        large: false,\n        majorStepSize: 10,\n        minorStepSize: 0.1,\n        selectAllOnFocus: false,\n        selectAllOnIncrement: false,\n        size: \"medium\",\n        small: false,\n        stepSize: 1,\n    };\n\n    public static getDerivedStateFromProps(props: NumericInputProps, state: NumericInputState) {\n        const nextState = {\n            prevMaxProp: props.max,\n            prevMinProp: props.min,\n        };\n\n        const didMinChange = props.min !== state.prevMinProp;\n        const didMaxChange = props.max !== state.prevMaxProp;\n        const didBoundsChange = didMinChange || didMaxChange;\n\n        // in controlled mode, use props.value\n        // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n        const value = props.value?.toString() ?? state.value;\n        const stepMaxPrecision = NumericInput.getStepMaxPrecision(props);\n\n        const sanitizedValue =\n            value !== NumericInput.VALUE_EMPTY\n                ? NumericInput.roundAndClampValue(value, stepMaxPrecision, props.min, props.max, 0, props.locale)\n                : NumericInput.VALUE_EMPTY;\n\n        // if a new min and max were provided that cause the existing value to fall\n        // outside of the new bounds, then clamp the value to the new valid range.\n        if (didBoundsChange && sanitizedValue !== state.value) {\n            return { ...nextState, stepMaxPrecision, value: sanitizedValue };\n        }\n        return { ...nextState, stepMaxPrecision, value };\n    }\n\n    private static CONTINUOUS_CHANGE_DELAY = 300;\n\n    private static CONTINUOUS_CHANGE_INTERVAL = 100;\n\n    // Value Helpers\n    // =============\n    private static getStepMaxPrecision(props: Omit<HTMLInputProps, \"size\"> & NumericInputProps) {\n        if (props.minorStepSize != null) {\n            return Utils.countDecimalPlaces(props.minorStepSize);\n        } else {\n            return Utils.countDecimalPlaces(props.stepSize!);\n        }\n    }\n\n    private static roundAndClampValue(\n        value: string,\n        stepMaxPrecision: number,\n        min: number | undefined,\n        max: number | undefined,\n        delta = 0,\n        locale: string | undefined,\n    ) {\n        if (!isValueNumeric(value, locale)) {\n            return NumericInput.VALUE_EMPTY;\n        }\n        const currentValue = parseStringToStringNumber(value, locale);\n        const nextValue = toMaxPrecision(Number(currentValue) + delta, stepMaxPrecision);\n        const clampedValue = clampValue(nextValue, min, max);\n        return toLocaleString(clampedValue, locale);\n    }\n\n    public state: NumericInputState = {\n        currentImeInputInvalid: false,\n        shouldSelectAfterUpdate: false,\n        stepMaxPrecision: NumericInput.getStepMaxPrecision(this.props),\n        value: getValueOrEmptyValue(this.props.value ?? this.props.defaultValue),\n    };\n\n    // updating these flags need not trigger re-renders, so don't include them in this.state.\n    private didPasteEventJustOccur = false;\n\n    private delta = 0;\n\n    public inputElement: HTMLInputElement | null = null;\n\n    private inputRef: React.Ref<HTMLInputElement> = refHandler(this, \"inputElement\", this.props.inputRef);\n\n    private intervalId?: number;\n\n    private incrementButtonHandlers = this.getButtonEventHandlers(IncrementDirection.UP);\n\n    private decrementButtonHandlers = this.getButtonEventHandlers(IncrementDirection.DOWN);\n\n    private getCurrentValueAsNumber = () => Number(parseStringToStringNumber(this.state.value, this.props.locale));\n\n    public render() {\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        const { buttonPosition, className, fill, large, size = \"medium\", small } = this.props;\n        const containerClasses = classNames(\n            Classes.NUMERIC_INPUT,\n            Classes.sizeClass(size, { large, small }),\n            className,\n        );\n        const buttons = this.renderButtons();\n        return (\n            <ControlGroup className={containerClasses} fill={fill}>\n                {buttonPosition === Position.LEFT && buttons}\n                {this.renderInput()}\n                {buttonPosition === Position.RIGHT && buttons}\n            </ControlGroup>\n        );\n    }\n\n    public componentDidUpdate(prevProps: NumericInputProps, prevState: NumericInputState) {\n        super.componentDidUpdate(prevProps, prevState);\n\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.inputRef = refHandler(this, \"inputElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.inputElement);\n        }\n\n        if (this.state.shouldSelectAfterUpdate) {\n            this.inputElement?.setSelectionRange(0, this.state.value.length);\n        }\n\n        const didMinChange = this.props.min !== prevProps.min;\n        const didMaxChange = this.props.max !== prevProps.max;\n        const didBoundsChange = didMinChange || didMaxChange;\n        const didLocaleChange = this.props.locale !== prevProps.locale;\n        const didValueChange = this.state.value !== prevState.value;\n\n        if ((didBoundsChange && didValueChange) || (didLocaleChange && prevState.value !== NumericInput.VALUE_EMPTY)) {\n            // we clamped the value due to a bounds change, so we should fire the change callback\n            const valueToParse = didLocaleChange ? prevState.value : this.state.value;\n            const valueAsString = parseStringToStringNumber(valueToParse, prevProps.locale);\n            const localizedValue = toLocaleString(+valueAsString, this.props.locale);\n\n            this.props.onValueChange?.(+valueAsString, localizedValue, this.inputElement);\n        }\n    }\n\n    protected validateProps(nextProps: HTMLInputProps & NumericInputProps) {\n        const { majorStepSize, max, min, minorStepSize, stepSize, value } = nextProps;\n        if (min != null && max != null && min > max) {\n            console.error(Errors.NUMERIC_INPUT_MIN_MAX);\n        }\n        if (stepSize! <= 0) {\n            console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (majorStepSize && majorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize > stepSize!) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n        }\n        if (majorStepSize && majorStepSize < stepSize!) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n        }\n\n        // controlled mode\n        if (value != null) {\n            const stepMaxPrecision = NumericInput.getStepMaxPrecision(nextProps);\n            const sanitizedValue = NumericInput.roundAndClampValue(\n                value.toString(),\n                stepMaxPrecision,\n                min,\n                max,\n                0,\n                this.props.locale,\n            );\n            const valueDoesNotMatch = sanitizedValue !== value.toString();\n            const localizedValue = toLocaleString(\n                Number(parseStringToStringNumber(value, this.props.locale)),\n                this.props.locale,\n            );\n            const isNotLocalized = sanitizedValue !== localizedValue;\n\n            if (valueDoesNotMatch && isNotLocalized) {\n                console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n            }\n        }\n    }\n\n    // Render Helpers\n    // ==============\n\n    private renderButtons() {\n        const { intent, max, min, locale } = this.props;\n        const value = parseStringToStringNumber(this.state.value, locale);\n        const disabled = this.props.disabled || this.props.readOnly;\n        const isIncrementDisabled = max !== undefined && value !== \"\" && +value >= max;\n        const isDecrementDisabled = min !== undefined && value !== \"\" && +value <= min;\n\n        return (\n            <ButtonGroup className={Classes.FIXED} key=\"button-group\" vertical={true}>\n                <Button\n                    aria-label=\"increment\"\n                    aria-controls={this.numericInputId}\n                    disabled={disabled || isIncrementDisabled}\n                    icon={<ChevronUp />}\n                    intent={intent}\n                    {...this.incrementButtonHandlers}\n                />\n                <Button\n                    aria-label=\"decrement\"\n                    aria-controls={this.numericInputId}\n                    disabled={disabled || isDecrementDisabled}\n                    icon={<ChevronDown />}\n                    intent={intent}\n                    {...this.decrementButtonHandlers}\n                />\n            </ButtonGroup>\n        );\n    }\n\n    private renderInput() {\n        const inputGroupHtmlProps = removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n        const valueAsNumber = this.getCurrentValueAsNumber();\n\n        return (\n            <InputGroup\n                asyncControl={this.props.asyncControl}\n                autoComplete=\"off\"\n                id={this.numericInputId}\n                role={this.props.allowNumericCharactersOnly ? \"spinbutton\" : undefined}\n                {...inputGroupHtmlProps}\n                aria-valuemax={this.props.max}\n                aria-valuemin={this.props.min}\n                aria-valuenow={valueAsNumber}\n                intent={this.state.currentImeInputInvalid ? Intent.DANGER : this.props.intent}\n                inputClassName={this.props.inputClassName}\n                inputRef={this.inputRef}\n                inputSize={this.props.inputSize}\n                // eslint-disable-next-line @typescript-eslint/no-deprecated\n                large={this.props.large}\n                leftElement={this.props.leftElement}\n                leftIcon={this.props.leftIcon}\n                onFocus={this.handleInputFocus}\n                onBlur={this.handleInputBlur}\n                onCompositionEnd={this.handleCompositionEnd}\n                onCompositionUpdate={this.handleCompositionUpdate}\n                onKeyDown={this.handleInputKeyDown}\n                // eslint-disable-next-line @typescript-eslint/no-deprecated\n                onKeyPress={this.handleInputKeyPress}\n                onPaste={this.handleInputPaste}\n                onValueChange={this.handleInputChange}\n                rightElement={this.props.rightElement}\n                size={this.props.size}\n                // eslint-disable-next-line @typescript-eslint/no-deprecated\n                small={this.props.small}\n                value={this.state.value}\n            />\n        );\n    }\n\n    // Callbacks - Buttons\n    // ===================\n\n    private getButtonEventHandlers(direction: IncrementDirection): ButtonEventHandlers {\n        return {\n            // keydown is fired repeatedly when held so it's implicitly continuous\n            onKeyDown: evt => {\n                if (!this.props.disabled && Utils.isKeyboardClick(evt)) {\n                    this.handleButtonClick(evt, direction);\n                }\n            },\n            onMouseDown: evt => {\n                if (!this.props.disabled) {\n                    this.handleButtonClick(evt, direction);\n                    this.startContinuousChange();\n                }\n            },\n        };\n    }\n\n    private handleButtonClick = (e: React.MouseEvent | React.KeyboardEvent, direction: IncrementDirection) => {\n        const delta = this.updateDelta(direction, e);\n        const nextValue = this.incrementValue(delta);\n        this.props.onButtonClick?.(Number(parseStringToStringNumber(nextValue, this.props.locale)), nextValue);\n    };\n\n    private startContinuousChange() {\n        // The button's onMouseUp event handler doesn't fire if the user\n        // releases outside of the button, so we need to watch all the way\n        // from the top.\n        document.addEventListener(\"mouseup\", this.stopContinuousChange);\n\n        // Initial delay is slightly longer to prevent the user from\n        // accidentally triggering the continuous increment/decrement.\n        this.setTimeout(() => {\n            this.intervalId = window.setInterval(this.handleContinuousChange, NumericInput.CONTINUOUS_CHANGE_INTERVAL);\n        }, NumericInput.CONTINUOUS_CHANGE_DELAY);\n    }\n\n    private stopContinuousChange = () => {\n        this.delta = 0;\n        this.clearTimeouts();\n        clearInterval(this.intervalId);\n        document.removeEventListener(\"mouseup\", this.stopContinuousChange);\n    };\n\n    private handleContinuousChange = () => {\n        // If either min or max prop is set, when reaching the limit\n        // the button will be disabled and stopContinuousChange will be never fired,\n        // hence the need to check on each iteration to properly clear the timeout\n        if (this.props.min !== undefined || this.props.max !== undefined) {\n            const min = this.props.min ?? -Infinity;\n            const max = this.props.max ?? Infinity;\n            const valueAsNumber = this.getCurrentValueAsNumber();\n            if (valueAsNumber <= min || valueAsNumber >= max) {\n                this.stopContinuousChange();\n                return;\n            }\n        }\n        const nextValue = this.incrementValue(this.delta);\n        this.props.onButtonClick?.(Number(parseStringToStringNumber(nextValue, this.props.locale)), nextValue);\n    };\n\n    // Callbacks - Input\n    // =================\n\n    private handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        // update this state flag to trigger update for input selection (see componentDidUpdate)\n        this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnFocus! });\n        this.props.onFocus?.(e);\n    };\n\n    private handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n        // always disable this flag on blur so it's ready for next time.\n        this.setState({ shouldSelectAfterUpdate: false });\n\n        if (this.props.clampValueOnBlur) {\n            const { value } = e.target as HTMLInputElement;\n            this.handleNextValue(this.roundAndClampValue(value));\n        }\n\n        this.props.onBlur?.(e);\n    };\n\n    private handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (this.props.disabled || this.props.readOnly) {\n            return;\n        }\n\n        const direction = Utils.getArrowKeyDirection(e, [\"ArrowDown\"], [\"ArrowUp\"]);\n        if (direction !== undefined) {\n            // when the input field has focus, some key combinations will modify\n            // the field's selection range. we'll actually want to select all\n            // text in the field after we modify the value on the following\n            // lines. preventing the default selection behavior lets us do that\n            // without interference.\n            e.preventDefault();\n\n            const delta = this.updateDelta(direction, e);\n            this.incrementValue(delta);\n        }\n\n        this.props.onKeyDown?.(e);\n    };\n\n    private handleCompositionEnd = (e: React.CompositionEvent<HTMLInputElement>) => {\n        if (this.props.allowNumericCharactersOnly) {\n            this.handleNextValue(sanitizeNumericInput(e.data, this.props.locale));\n            this.setState({ currentImeInputInvalid: false });\n        }\n    };\n\n    private handleCompositionUpdate = (e: React.CompositionEvent<HTMLInputElement>) => {\n        if (this.props.allowNumericCharactersOnly) {\n            const { data } = e;\n            const sanitizedValue = sanitizeNumericInput(data, this.props.locale);\n            if (sanitizedValue.length === 0 && data.length > 0) {\n                this.setState({ currentImeInputInvalid: true });\n            } else {\n                this.setState({ currentImeInputInvalid: false });\n            }\n        }\n    };\n\n    private handleInputKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n        // e.key is not trustworthy in onKeyDown in all browsers.\n        if (this.props.allowNumericCharactersOnly && !isValidNumericKeyboardEvent(e, this.props.locale)) {\n            e.preventDefault();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        this.props.onKeyPress?.(e);\n    };\n\n    private handleInputPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n        this.didPasteEventJustOccur = true;\n        this.props.onPaste?.(e);\n    };\n\n    private handleInputChange = (value: string) => {\n        let nextValue = value;\n        if (this.props.allowNumericCharactersOnly && this.didPasteEventJustOccur) {\n            this.didPasteEventJustOccur = false;\n            nextValue = sanitizeNumericInput(value, this.props.locale);\n        }\n\n        this.handleNextValue(nextValue);\n        this.setState({ shouldSelectAfterUpdate: false });\n    };\n\n    // Data logic\n    // ==========\n\n    private handleNextValue(valueAsString: string) {\n        if (this.props.value == null) {\n            this.setState({ value: valueAsString });\n        }\n\n        this.props.onValueChange?.(\n            Number(parseStringToStringNumber(valueAsString, this.props.locale)),\n            valueAsString,\n            this.inputElement,\n        );\n    }\n\n    private incrementValue(delta: number) {\n        // pretend we're incrementing from 0 if currValue is empty\n        const currValue = this.state.value === NumericInput.VALUE_EMPTY ? NumericInput.VALUE_ZERO : this.state.value;\n        const nextValue = this.roundAndClampValue(currValue, delta);\n\n        if (nextValue !== this.state.value) {\n            this.handleNextValue(nextValue);\n            this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnIncrement! });\n        }\n\n        // return value used in continuous change updates\n        return nextValue;\n    }\n\n    private getIncrementDelta(direction: IncrementDirection, isShiftKeyPressed: boolean, isAltKeyPressed: boolean) {\n        const { majorStepSize, minorStepSize, stepSize } = this.props;\n\n        if (isShiftKeyPressed && majorStepSize != null) {\n            return direction * majorStepSize;\n        } else if (isAltKeyPressed && minorStepSize != null) {\n            return direction * minorStepSize;\n        } else {\n            return direction * stepSize!;\n        }\n    }\n\n    private roundAndClampValue(value: string, delta = 0) {\n        return NumericInput.roundAndClampValue(\n            value,\n            this.state.stepMaxPrecision,\n            this.props.min,\n            this.props.max,\n            delta,\n            this.props.locale,\n        );\n    }\n\n    private updateDelta(direction: IncrementDirection, e: React.MouseEvent | React.KeyboardEvent) {\n        this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n        return this.delta;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}