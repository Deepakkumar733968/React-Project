{"ast":null,"code":"/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { ALERT_WARN_CANCEL_ESCAPE_KEY, ALERT_WARN_CANCEL_OUTSIDE_CLICK, ALERT_WARN_CANCEL_PROPS } from \"../../common/errors\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"../dialog/dialog\";\nimport { Icon } from \"../icon/icon\";\n/**\n * Alert component.\n *\n * @see https://blueprintjs.com/docs/#core/components/alert\n */\nexport var Alert = function (props) {\n  var cancelButtonText = props.cancelButtonText,\n    _a = props.canEscapeKeyCancel,\n    canEscapeKeyCancel = _a === void 0 ? false : _a,\n    _b = props.canOutsideClickCancel,\n    canOutsideClickCancel = _b === void 0 ? false : _b,\n    children = props.children,\n    className = props.className,\n    _c = props.confirmButtonText,\n    confirmButtonText = _c === void 0 ? \"OK\" : _c,\n    icon = props.icon,\n    intent = props.intent,\n    _d = props.isOpen,\n    isOpen = _d === void 0 ? false : _d,\n    _e = props.loading,\n    loading = _e === void 0 ? false : _e,\n    onCancel = props.onCancel,\n    onClose = props.onClose,\n    onConfirm = props.onConfirm,\n    overlayProps = __rest(props, [\"cancelButtonText\", \"canEscapeKeyCancel\", \"canOutsideClickCancel\", \"children\", \"className\", \"confirmButtonText\", \"icon\", \"intent\", \"isOpen\", \"loading\", \"onCancel\", \"onClose\", \"onConfirm\"]);\n  useValidateProps(function () {\n    if (onClose == null && cancelButtonText == null !== (onCancel == null)) {\n      console.warn(ALERT_WARN_CANCEL_PROPS);\n    }\n    var hasCancelHandler = onCancel != null || onClose != null;\n    if (canEscapeKeyCancel && !hasCancelHandler) {\n      console.warn(ALERT_WARN_CANCEL_ESCAPE_KEY);\n    }\n    if (canOutsideClickCancel && !hasCancelHandler) {\n      console.warn(ALERT_WARN_CANCEL_OUTSIDE_CLICK);\n    }\n  }, [canEscapeKeyCancel, canOutsideClickCancel, cancelButtonText, onCancel, onClose]);\n  var internalHandleCallbacks = React.useCallback(function (confirmed, event) {\n    var _a;\n    (_a = confirmed ? onConfirm : onCancel) === null || _a === void 0 ? void 0 : _a(event);\n    onClose === null || onClose === void 0 ? void 0 : onClose(confirmed, event);\n  }, [onCancel, onClose, onConfirm]);\n  var handleCancel = React.useCallback(function (event) {\n    return internalHandleCallbacks(false, event);\n  }, [internalHandleCallbacks]);\n  var handleConfirm = React.useCallback(function (event) {\n    return internalHandleCallbacks(true, event);\n  }, [internalHandleCallbacks]);\n  return React.createElement(Dialog, __assign({}, overlayProps, {\n    role: \"alertdialog\",\n    className: classNames(Classes.ALERT, className),\n    canEscapeKeyClose: canEscapeKeyCancel,\n    canOutsideClickClose: canOutsideClickCancel,\n    isOpen: isOpen,\n    onClose: handleCancel\n  }), React.createElement(\"div\", {\n    className: Classes.ALERT_BODY\n  }, React.createElement(Icon, {\n    icon: icon,\n    size: 40,\n    intent: intent\n  }), React.createElement(\"div\", {\n    className: Classes.ALERT_CONTENTS\n  }, children)), React.createElement(\"div\", {\n    className: Classes.ALERT_FOOTER\n  }, React.createElement(Button, {\n    loading: loading,\n    intent: intent,\n    text: confirmButtonText,\n    onClick: handleConfirm\n  }), cancelButtonText && React.createElement(Button, {\n    text: cancelButtonText,\n    disabled: loading,\n    onClick: handleCancel\n  })));\n};\nAlert.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Alert\");","map":{"version":3,"names":["classNames","React","Classes","DISPLAYNAME_PREFIX","ALERT_WARN_CANCEL_ESCAPE_KEY","ALERT_WARN_CANCEL_OUTSIDE_CLICK","ALERT_WARN_CANCEL_PROPS","useValidateProps","Button","Dialog","Icon","Alert","props","cancelButtonText","_a","canEscapeKeyCancel","_b","canOutsideClickCancel","children","className","_c","confirmButtonText","icon","intent","_d","isOpen","_e","loading","onCancel","onClose","onConfirm","overlayProps","__rest","console","warn","hasCancelHandler","internalHandleCallbacks","useCallback","confirmed","event","handleCancel","handleConfirm","createElement","__assign","role","ALERT","canEscapeKeyClose","canOutsideClickClose","ALERT_BODY","size","ALERT_CONTENTS","ALERT_FOOTER","text","onClick","disabled","displayName","concat"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\alert\\alert.tsx"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Classes, DISPLAYNAME_PREFIX, type Intent, type MaybeElement, type Props } from \"../../common\";\nimport {\n    ALERT_WARN_CANCEL_ESCAPE_KEY,\n    ALERT_WARN_CANCEL_OUTSIDE_CLICK,\n    ALERT_WARN_CANCEL_PROPS,\n} from \"../../common/errors\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"../dialog/dialog\";\nimport { Icon, type IconName } from \"../icon/icon\";\nimport type { OverlayLifecycleProps } from \"../overlay/overlayProps\";\n\nexport interface AlertProps extends OverlayLifecycleProps, Props {\n    /**\n     * Whether pressing <kbd>escape</kbd> when focused on the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canEscapeKeyCancel?: boolean;\n\n    /**\n     * Whether clicking outside the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canOutsideClickCancel?: boolean;\n\n    /**\n     * The text for the cancel button.\n     * If this prop is defined, then either `onCancel` or `onClose` must also be defined.\n     */\n    cancelButtonText?: string;\n\n    /** Dialog contents. */\n    children?: React.ReactNode;\n\n    /**\n     * The text for the confirm (right-most) button.\n     * This button will always appear, and uses the value of the `intent` prop below.\n     *\n     * @default \"OK\"\n     */\n    confirmButtonText?: string;\n\n    /** Name of a Blueprint UI icon (or an icon element) to display on the left side. */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * The intent to be applied to the confirm (right-most) button and the icon (if provided).\n     */\n    intent?: Intent;\n\n    /**\n     * Toggles the visibility of the alert.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * If set to `true`, the confirm button will be set to its loading state. The cancel button, if\n     * visible, will be disabled.\n     *\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * CSS styles to apply to the alert.\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\n     * This is used by React `CSSTransition` to know when a transition completes and must match\n     * the duration of the animation in CSS. Only set this prop if you override Blueprint's default\n     * transitions with new transitions of a different length.\n     *\n     * @default 300\n     */\n    transitionDuration?: number;\n\n    /**\n     * The container element into which the overlay renders its contents, when `usePortal` is `true`.\n     * This prop is ignored if `usePortal` is `false`.\n     *\n     * @default document.body\n     */\n    portalContainer?: HTMLElement;\n\n    /**\n     * Handler invoked when the alert is canceled. Alerts can be **canceled** in the following ways:\n     * - clicking the cancel button (if `cancelButtonText` is defined)\n     * - pressing the escape key (if `canEscapeKeyCancel` is enabled)\n     * - clicking on the overlay backdrop (if `canOutsideClickCancel` is enabled)\n     *\n     * If any of the `cancel` props are defined, then either `onCancel` or `onClose` must be defined.\n     */\n    onCancel?: (event?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /**\n     * Handler invoked when the confirm button is clicked. Alerts can be **confirmed** in the following ways:\n     * - clicking the confirm button\n     * - focusing on the confirm button and pressing `enter` or `space`\n     */\n    onConfirm?: (event?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /**\n     * Handler invoked when the Alert is confirmed or canceled; see `onConfirm` and `onCancel` for more details.\n     * First argument is `true` if confirmed, `false` otherwise.\n     * This is an alternative to defining separate `onConfirm` and `onCancel` handlers.\n     */\n    onClose?: (confirmed: boolean, event?: React.SyntheticEvent<HTMLElement>) => void;\n}\n\n/**\n * Alert component.\n *\n * @see https://blueprintjs.com/docs/#core/components/alert\n */\nexport const Alert: React.FC<AlertProps> = props => {\n    const {\n        cancelButtonText,\n        canEscapeKeyCancel = false,\n        canOutsideClickCancel = false,\n        children,\n        className,\n        confirmButtonText = \"OK\",\n        icon,\n        intent,\n        isOpen = false,\n        loading = false,\n        onCancel,\n        onClose,\n        onConfirm,\n        ...overlayProps\n    } = props;\n\n    useValidateProps(() => {\n        if (onClose == null && (cancelButtonText == null) !== (onCancel == null)) {\n            console.warn(ALERT_WARN_CANCEL_PROPS);\n        }\n\n        const hasCancelHandler = onCancel != null || onClose != null;\n        if (canEscapeKeyCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_ESCAPE_KEY);\n        }\n        if (canOutsideClickCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_OUTSIDE_CLICK);\n        }\n    }, [canEscapeKeyCancel, canOutsideClickCancel, cancelButtonText, onCancel, onClose]);\n\n    const internalHandleCallbacks = React.useCallback(\n        (confirmed: boolean, event?: React.SyntheticEvent<HTMLElement>) => {\n            (confirmed ? onConfirm : onCancel)?.(event);\n            onClose?.(confirmed, event);\n        },\n        [onCancel, onClose, onConfirm],\n    );\n\n    const handleCancel = React.useCallback(\n        (event?: React.SyntheticEvent<HTMLElement>) => internalHandleCallbacks(false, event),\n        [internalHandleCallbacks],\n    );\n\n    const handleConfirm = React.useCallback(\n        (event: React.SyntheticEvent<HTMLElement>) => internalHandleCallbacks(true, event),\n        [internalHandleCallbacks],\n    );\n\n    return (\n        <Dialog\n            {...overlayProps}\n            role=\"alertdialog\"\n            className={classNames(Classes.ALERT, className)}\n            canEscapeKeyClose={canEscapeKeyCancel}\n            canOutsideClickClose={canOutsideClickCancel}\n            isOpen={isOpen}\n            onClose={handleCancel}\n        >\n            <div className={Classes.ALERT_BODY}>\n                <Icon icon={icon} size={40} intent={intent} />\n                <div className={Classes.ALERT_CONTENTS}>{children}</div>\n            </div>\n            <div className={Classes.ALERT_FOOTER}>\n                <Button loading={loading} intent={intent} text={confirmButtonText} onClick={handleConfirm} />\n                {cancelButtonText && <Button text={cancelButtonText} disabled={loading} onClick={handleCancel} />}\n            </div>\n        </Dialog>\n    );\n};\n\nAlert.displayName = `${DISPLAYNAME_PREFIX}.Alert`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}