{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Icons, IconSize, SVGIconContainer } from \"@blueprintjs/icons\";\nimport { Classes, DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common\";\n// re-export for convenience, since some users won't be importing from or have a direct dependency on the icons package\nexport { IconSize };\n/**\n * Icon component.\n *\n * @see https://blueprintjs.com/docs/#core/components/icon\n */\n// eslint-disable-next-line prefer-arrow-callback\nexport var Icon = React.forwardRef(function (props, ref) {\n  var _a, _b;\n  var _c = props.autoLoad,\n    autoLoad = _c === void 0 ? true : _c,\n    className = props.className,\n    color = props.color,\n    icon = props.icon,\n    intent = props.intent,\n    _d = props.tagName,\n    tagName = _d === void 0 ? \"span\" : _d,\n    svgProps = props.svgProps,\n    title = props.title,\n    htmlTitle = props.htmlTitle,\n    htmlProps = __rest(props, [\"autoLoad\", \"className\", \"color\", \"icon\", \"intent\", \"tagName\", \"svgProps\", \"title\", \"htmlTitle\"]);\n  // Preserve Blueprint v4.x behavior: iconSize prop takes predecence, then size prop, then fall back to default value\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  var size = (_b = (_a = props.iconSize) !== null && _a !== void 0 ? _a : props.size) !== null && _b !== void 0 ? _b : IconSize.STANDARD;\n  var _e = React.useState(function () {\n      return typeof icon === \"string\" ? Icons.getPaths(icon, size) : undefined;\n    }),\n    iconPaths = _e[0],\n    setIconPaths = _e[1];\n  React.useEffect(function () {\n    var shouldCancelIconLoading = false;\n    if (typeof icon === \"string\") {\n      // The icon may have been loaded already, in which case we can simply grab it.\n      // N.B. when `autoLoad={true}`, we can't rely on simply calling Icons.load() here to re-load an icon module\n      // which has already been loaded & cached, since it may have been loaded with special loading options which\n      // this component knows nothing about.\n      var loadedIconPaths = Icons.getPaths(icon, size);\n      if (loadedIconPaths !== undefined) {\n        setIconPaths(loadedIconPaths);\n      } else if (autoLoad) {\n        Icons.load(icon, size).then(function () {\n          // if this effect expired by the time icon loaded, then don't set state\n          if (!shouldCancelIconLoading) {\n            setIconPaths(Icons.getPaths(icon, size));\n          }\n        }).catch(function (reason) {\n          console.error(\"[Blueprint] Icon '\".concat(icon, \"' (\").concat(size, \"px) could not be loaded.\"), reason);\n        });\n      } else {\n        console.error(\"[Blueprint] Icon '\".concat(icon, \"' (\").concat(size, \"px) is not loaded yet and autoLoad={false}, did you call Icons.load('\").concat(icon, \"', \").concat(size, \")?\"));\n      }\n    }\n    return function () {\n      shouldCancelIconLoading = true;\n    };\n  }, [autoLoad, icon, size]);\n  if (icon == null || typeof icon === \"boolean\") {\n    return null;\n  } else if (typeof icon !== \"string\") {\n    return icon;\n  }\n  if (iconPaths == null) {\n    // fall back to icon font if unloaded or unable to load SVG implementation\n    var sizeClass = size === IconSize.STANDARD ? Classes.ICON_STANDARD : size === IconSize.LARGE ? Classes.ICON_LARGE : undefined;\n    return React.createElement(tagName || \"span\", __assign(__assign({\n      \"aria-hidden\": title ? undefined : true\n    }, removeNonHTMLProps(htmlProps)), {\n      className: classNames(Classes.ICON, sizeClass, Classes.iconClass(icon), Classes.intentClass(intent), className),\n      \"data-icon\": icon,\n      ref: ref,\n      title: htmlTitle\n    }));\n  } else {\n    var pathElements = iconPaths.map(function (d, i) {\n      return React.createElement(\"path\", {\n        d: d,\n        key: i,\n        fillRule: \"evenodd\"\n      });\n    });\n    // HACKHACK: there is no good way to narrow the type of SVGIconContainerProps here because of the use\n    // of a conditional type within the type union that defines that interface. So we cast to <any>.\n    // see https://github.com/microsoft/TypeScript/issues/24929, https://github.com/microsoft/TypeScript/issues/33014\n    return React.createElement(SVGIconContainer, __assign({\n      children: pathElements,\n      // don't forward `Classes.ICON` or `Classes.iconClass(icon)` here, since the container will render those classes\n      className: classNames(Classes.intentClass(intent), className),\n      color: color,\n      htmlTitle: htmlTitle,\n      iconName: icon,\n      ref: ref,\n      size: size,\n      svgProps: svgProps,\n      tagName: tagName,\n      title: title\n    }, removeNonHTMLProps(htmlProps)));\n  }\n});\nIcon.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Icon\");","map":{"version":3,"names":["classNames","React","Icons","IconSize","SVGIconContainer","Classes","DISPLAYNAME_PREFIX","removeNonHTMLProps","Icon","forwardRef","props","ref","_c","autoLoad","className","color","icon","intent","_d","tagName","svgProps","title","htmlTitle","htmlProps","__rest","size","_b","_a","iconSize","STANDARD","_e","useState","getPaths","undefined","iconPaths","setIconPaths","useEffect","shouldCancelIconLoading","loadedIconPaths","load","then","catch","reason","console","error","concat","sizeClass","ICON_STANDARD","LARGE","ICON_LARGE","createElement","__assign","ICON","iconClass","intentClass","pathElements","map","d","i","key","fillRule","children","iconName","displayName"],"sources":["C:\\Users\\deepa\\Deepak\\Working-File\\React-Project\\new-working-file\\React-Project\\my-app\\node_modules\\@blueprintjs\\core\\src\\components\\icon\\icon.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    type DefaultSVGIconProps,\n    type IconName,\n    type IconPaths,\n    Icons,\n    IconSize,\n    SVGIconContainer,\n    type SVGIconProps,\n} from \"@blueprintjs/icons\";\n\nimport {\n    Classes,\n    DISPLAYNAME_PREFIX,\n    type IntentProps,\n    type MaybeElement,\n    type Props,\n    removeNonHTMLProps,\n} from \"../../common\";\n\n// re-export for convenience, since some users won't be importing from or have a direct dependency on the icons package\nexport { type IconName, IconSize };\n\nexport interface IconOwnProps {\n    /**\n     * Whether the component should automatically load icon contents using an async import.\n     *\n     * @default true\n     */\n    autoLoad?: boolean;\n\n    /**\n     * Name of a Blueprint UI icon, or an icon element, to render. This prop is\n     * required because it determines the content of the component, but it can\n     * be explicitly set to falsy values to render nothing.\n     *\n     * - If `null` or `undefined` or `false`, this component will render nothing.\n     * - If given an `IconName` (a string literal union of all icon names), that\n     *   icon will be rendered as an `<svg>` with `<path>` tags. Unknown strings\n     *   will render a blank icon to occupy space.\n     * - If given a `React.JSX.Element`, that element will be rendered and _all other\n     *   props on this component are ignored._ This type is supported to\n     *   simplify icon support in other Blueprint components. As a consumer, you\n     *   should avoid using `<Icon icon={<Element />}` directly; simply render\n     *   `<Element />` instead.\n     */\n    icon: IconName | MaybeElement;\n\n    /**\n     * Alias for `size` prop. Kept around for backwards-compatibility with Blueprint v4.x,\n     * will be removed in v6.0.\n     *\n     * @deprecated use `size` prop instead\n     */\n    iconSize?: number;\n\n    /** Props to apply to the `SVG` element */\n    svgProps?: React.HTMLAttributes<SVGElement>;\n}\n\n// N.B. the following inteface is defined as a type alias instead of an interface due to a TypeScript limitation\n// where interfaces cannot extend conditionally-defined union types.\n/**\n * Generic interface for the `<Icon>` component which may be parameterized by its root element type.\n *\n * @see https://blueprintjs.com/docs/#core/components/icon.dom-attributes\n */\nexport type IconProps<T extends Element = Element> = IntentProps & Props & SVGIconProps<T> & IconOwnProps;\n\n/**\n * The default `<Icon>` props interface, equivalent to `IconProps` with its default type parameter.\n * This is primarly exported for documentation purposes; users should reference `IconProps<T>` instead.\n */\nexport interface DefaultIconProps extends IntentProps, Props, DefaultSVGIconProps, IconOwnProps {\n    // empty interface for documentation purposes (documentalist handles this better than the IconProps<T> type alias)\n}\n\n/**\n * Generic icon component type. This is essentially a type hack required to make forwardRef work with generic\n * components. Note that this slows down TypeScript compilation, but it better than the alternative of globally\n * augmenting \"@types/react\".\n *\n * @see https://stackoverflow.com/a/73795494/7406866\n */\nexport interface IconComponent extends React.FC<IconProps<Element>> {\n    /**\n     * ReturnType here preserves type compatability with React 16 while we migrate to React 18.\n     * see: https://github.com/palantir/blueprint/pull/7142/files#r1915691062\n     */\n    // TODO(React 18): Replace return type with `React.ReactNode` once we drop support for React 16.\n    <T extends Element = Element>(props: IconProps<T>): ReturnType<React.FC<IconProps<Element>>> | null;\n}\n\n/**\n * Icon component.\n *\n * @see https://blueprintjs.com/docs/#core/components/icon\n */\n// eslint-disable-next-line prefer-arrow-callback\nexport const Icon: IconComponent = React.forwardRef(function <T extends Element>(\n    props: IconProps<T>,\n    ref: React.Ref<T>,\n) {\n    const {\n        autoLoad = true,\n        className,\n        color,\n        icon,\n        intent,\n        tagName = \"span\",\n        svgProps,\n        title,\n        htmlTitle,\n        ...htmlProps\n    } = props;\n\n    // Preserve Blueprint v4.x behavior: iconSize prop takes predecence, then size prop, then fall back to default value\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    const size = props.iconSize ?? props.size ?? IconSize.STANDARD;\n\n    const [iconPaths, setIconPaths] = React.useState<IconPaths | undefined>(() =>\n        typeof icon === \"string\" ? Icons.getPaths(icon, size) : undefined,\n    );\n\n    React.useEffect(() => {\n        let shouldCancelIconLoading = false;\n        if (typeof icon === \"string\") {\n            // The icon may have been loaded already, in which case we can simply grab it.\n            // N.B. when `autoLoad={true}`, we can't rely on simply calling Icons.load() here to re-load an icon module\n            // which has already been loaded & cached, since it may have been loaded with special loading options which\n            // this component knows nothing about.\n            const loadedIconPaths = Icons.getPaths(icon, size);\n\n            if (loadedIconPaths !== undefined) {\n                setIconPaths(loadedIconPaths);\n            } else if (autoLoad) {\n                Icons.load(icon, size)\n                    .then(() => {\n                        // if this effect expired by the time icon loaded, then don't set state\n                        if (!shouldCancelIconLoading) {\n                            setIconPaths(Icons.getPaths(icon, size));\n                        }\n                    })\n                    .catch(reason => {\n                        console.error(`[Blueprint] Icon '${icon}' (${size}px) could not be loaded.`, reason);\n                    });\n            } else {\n                console.error(\n                    `[Blueprint] Icon '${icon}' (${size}px) is not loaded yet and autoLoad={false}, did you call Icons.load('${icon}', ${size})?`,\n                );\n            }\n        }\n        return () => {\n            shouldCancelIconLoading = true;\n        };\n    }, [autoLoad, icon, size]);\n\n    if (icon == null || typeof icon === \"boolean\") {\n        return null;\n    } else if (typeof icon !== \"string\") {\n        return icon;\n    }\n\n    if (iconPaths == null) {\n        // fall back to icon font if unloaded or unable to load SVG implementation\n        const sizeClass =\n            size === IconSize.STANDARD\n                ? Classes.ICON_STANDARD\n                : size === IconSize.LARGE\n                  ? Classes.ICON_LARGE\n                  : undefined;\n        return React.createElement(tagName || \"span\", {\n            \"aria-hidden\": title ? undefined : true,\n            ...removeNonHTMLProps(htmlProps),\n            className: classNames(\n                Classes.ICON,\n                sizeClass,\n                Classes.iconClass(icon),\n                Classes.intentClass(intent),\n                className,\n            ),\n            \"data-icon\": icon,\n            ref,\n            title: htmlTitle,\n        });\n    } else {\n        const pathElements = iconPaths.map((d, i) => <path d={d} key={i} fillRule=\"evenodd\" />);\n        // HACKHACK: there is no good way to narrow the type of SVGIconContainerProps here because of the use\n        // of a conditional type within the type union that defines that interface. So we cast to <any>.\n        // see https://github.com/microsoft/TypeScript/issues/24929, https://github.com/microsoft/TypeScript/issues/33014\n        return (\n            <SVGIconContainer<any>\n                children={pathElements}\n                // don't forward `Classes.ICON` or `Classes.iconClass(icon)` here, since the container will render those classes\n                className={classNames(Classes.intentClass(intent), className)}\n                color={color}\n                htmlTitle={htmlTitle}\n                iconName={icon}\n                ref={ref}\n                size={size}\n                svgProps={svgProps}\n                tagName={tagName}\n                title={title}\n                {...removeNonHTMLProps(htmlProps)}\n            />\n        );\n    }\n});\nIcon.displayName = `${DISPLAYNAME_PREFIX}.Icon`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}